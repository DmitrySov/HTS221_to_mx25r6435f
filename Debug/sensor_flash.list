
sensor_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005528  08005528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005570  08005570  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005570  08005570  00015570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005578  08005578  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005578  08005578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800557c  0800557c  0001557c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  0800558c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  0800558c  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134dc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ae  00000000  00000000  00033518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  000359c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00036848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a3c  00000000  00000000  000375e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119be  00000000  00000000  0005e01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecc75  00000000  00000000  0006f9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c64f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c0c  00000000  00000000  0015c6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005510 	.word	0x08005510

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005510 	.word	0x08005510

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <read8>:

#include "HTS221.h"


static uint8_t read8(hts221_t* sensor, uint8_t Mem_reg)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af04      	add	r7, sp, #16
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	460b      	mov	r3, r1
 80004ca:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	HAL_I2C_Mem_Read(sensor->i2c_handler, sensor->address, Mem_reg, 1, &value, 1, I2C_HTS_TIMEOUT);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	6818      	ldr	r0, [r3, #0]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	791b      	ldrb	r3, [r3, #4]
 80004d4:	b299      	uxth	r1, r3
 80004d6:	78fb      	ldrb	r3, [r7, #3]
 80004d8:	b29a      	uxth	r2, r3
 80004da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004de:	9302      	str	r3, [sp, #8]
 80004e0:	2301      	movs	r3, #1
 80004e2:	9301      	str	r3, [sp, #4]
 80004e4:	f107 030f 	add.w	r3, r7, #15
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2301      	movs	r3, #1
 80004ec:	f001 fe84 	bl	80021f8 <HAL_I2C_Mem_Read>

	return value;
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <read16>:

static uint16_t read16(hts221_t* sensor, uint8_t Mem_reg)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b088      	sub	sp, #32
 80004fe:	af04      	add	r7, sp, #16
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	460b      	mov	r3, r1
 8000504:	70fb      	strb	r3, [r7, #3]
	uint8_t value[2];

	HAL_I2C_Mem_Read(sensor->i2c_handler, sensor->address, (Mem_reg | 0x80), I2C_MEMADD_SIZE_8BIT, value, 2, I2C_HTS_TIMEOUT);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	6818      	ldr	r0, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	791b      	ldrb	r3, [r3, #4]
 800050e:	b299      	uxth	r1, r3
 8000510:	78fb      	ldrb	r3, [r7, #3]
 8000512:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000516:	b2db      	uxtb	r3, r3
 8000518:	b29a      	uxth	r2, r3
 800051a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051e:	9302      	str	r3, [sp, #8]
 8000520:	2302      	movs	r3, #2
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2301      	movs	r3, #1
 800052c:	f001 fe64 	bl	80021f8 <HAL_I2C_Mem_Read>

	return (((uint16_t)(value[1])) << 8) | (uint16_t)value[0];
 8000530:	7b7b      	ldrb	r3, [r7, #13]
 8000532:	021b      	lsls	r3, r3, #8
 8000534:	b21a      	sxth	r2, r3
 8000536:	7b3b      	ldrb	r3, [r7, #12]
 8000538:	b21b      	sxth	r3, r3
 800053a:	4313      	orrs	r3, r2
 800053c:	b21b      	sxth	r3, r3
 800053e:	b29b      	uxth	r3, r3
}
 8000540:	4618      	mov	r0, r3
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <write8>:

static void write8(hts221_t* sensor, uint8_t Mem_reg, uint8_t* data)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af04      	add	r7, sp, #16
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	460b      	mov	r3, r1
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(sensor->i2c_handler, sensor->address, Mem_reg, 1, data, 1, I2C_HTS_TIMEOUT);
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	6818      	ldr	r0, [r3, #0]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	b299      	uxth	r1, r3
 8000560:	7afb      	ldrb	r3, [r7, #11]
 8000562:	b29a      	uxth	r2, r3
 8000564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000568:	9302      	str	r3, [sp, #8]
 800056a:	2301      	movs	r3, #1
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2301      	movs	r3, #1
 8000574:	f001 fd2c 	bl	8001fd0 <HAL_I2C_Mem_Write>
}
 8000578:	bf00      	nop
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <HTS221_set_power_mode>:

/////////////////////////////////////////////


void HTS221_set_power_mode(hts221_t* sensor, bool mode)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
	// mode 1 - Active,  0 - Power down
	uint8_t tmp;
	tmp = read8(sensor, CTRL_REG1);
 800058c:	2120      	movs	r1, #32
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f7ff ff96 	bl	80004c0 <read8>
 8000594:	4603      	mov	r3, r0
 8000596:	73fb      	strb	r3, [r7, #15]

	if(mode == 0) tmp &= 0x7F; // 0xxx xxxx
 8000598:	78fb      	ldrb	r3, [r7, #3]
 800059a:	f083 0301 	eor.w	r3, r3, #1
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d005      	beq.n	80005b0 <HTS221_set_power_mode+0x30>
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	e004      	b.n	80005ba <HTS221_set_power_mode+0x3a>
	else
	{
		tmp |= 0x80;
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	73fb      	strb	r3, [r7, #15]
	}

	write8(sensor, CTRL_REG1, &tmp);
 80005ba:	f107 030f 	add.w	r3, r7, #15
 80005be:	461a      	mov	r2, r3
 80005c0:	2120      	movs	r1, #32
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff ffc0 	bl	8000548 <write8>
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <HTS221_set_output_data_rate>:



void HTS221_set_output_data_rate(hts221_t* sensor, uint8_t data_rate)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
	if(data_rate > 3) data_rate = 3;
 80005dc:	78fb      	ldrb	r3, [r7, #3]
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d901      	bls.n	80005e6 <HTS221_set_output_data_rate+0x16>
 80005e2:	2303      	movs	r3, #3
 80005e4:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp;
	tmp = read8(sensor, CTRL_REG1);
 80005e6:	2120      	movs	r1, #32
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff ff69 	bl	80004c0 <read8>
 80005ee:	4603      	mov	r3, r0
 80005f0:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xFC; // XXXX XX00
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	f023 0303 	bic.w	r3, r3, #3
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	73fb      	strb	r3, [r7, #15]
	tmp |= data_rate & 0x03; // double protection for writing wrong number
 80005fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000600:	f003 0303 	and.w	r3, r3, #3
 8000604:	b25a      	sxtb	r2, r3
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	b25b      	sxtb	r3, r3
 800060a:	4313      	orrs	r3, r2
 800060c:	b25b      	sxtb	r3, r3
 800060e:	b2db      	uxtb	r3, r3
 8000610:	73fb      	strb	r3, [r7, #15]

	write8(sensor, CTRL_REG1, &tmp);
 8000612:	f107 030f 	add.w	r3, r7, #15
 8000616:	461a      	mov	r2, r3
 8000618:	2120      	movs	r1, #32
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff ff94 	bl	8000548 <write8>
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <HTS221_set_temp_sample>:



void HTS221_set_temp_sample(hts221_t* sensor, uint8_t sample_mode)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]
	if(sample_mode > 7) sample_mode = 7;
 8000634:	78fb      	ldrb	r3, [r7, #3]
 8000636:	2b07      	cmp	r3, #7
 8000638:	d901      	bls.n	800063e <HTS221_set_temp_sample+0x16>
 800063a:	2307      	movs	r3, #7
 800063c:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp;
	tmp = read8(sensor, AV_CONF);
 800063e:	2110      	movs	r1, #16
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ff3d 	bl	80004c0 <read8>
 8000646:	4603      	mov	r3, r0
 8000648:	73fb      	strb	r3, [r7, #15]

	tmp &= 0xC7; // 0bXX00 0xxx
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000650:	b2db      	uxtb	r3, r3
 8000652:	73fb      	strb	r3, [r7, #15]
	tmp |= (sample_mode) << 3;
 8000654:	78fb      	ldrb	r3, [r7, #3]
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	b25a      	sxtb	r2, r3
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	b25b      	sxtb	r3, r3
 800065e:	4313      	orrs	r3, r2
 8000660:	b25b      	sxtb	r3, r3
 8000662:	b2db      	uxtb	r3, r3
 8000664:	73fb      	strb	r3, [r7, #15]

	write8(sensor, AV_CONF, &tmp);
 8000666:	f107 030f 	add.w	r3, r7, #15
 800066a:	461a      	mov	r2, r3
 800066c:	2110      	movs	r1, #16
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f7ff ff6a 	bl	8000548 <write8>
}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <HTS221_set_humidity_sample>:

void HTS221_set_humidity_sample(hts221_t* sensor, uint8_t sample_mode)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	70fb      	strb	r3, [r7, #3]
	if(sample_mode > 7) sample_mode = 7;
 8000688:	78fb      	ldrb	r3, [r7, #3]
 800068a:	2b07      	cmp	r3, #7
 800068c:	d901      	bls.n	8000692 <HTS221_set_humidity_sample+0x16>
 800068e:	2307      	movs	r3, #7
 8000690:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp;
	tmp = read8(sensor, AV_CONF);
 8000692:	2110      	movs	r1, #16
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff ff13 	bl	80004c0 <read8>
 800069a:	4603      	mov	r3, r0
 800069c:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xF8; // 0bXXXXX000
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	f023 0307 	bic.w	r3, r3, #7
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	73fb      	strb	r3, [r7, #15]

	tmp |= (sample_mode) & 0x07; // protection for writing number bigger than 7
 80006a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006ac:	f003 0307 	and.w	r3, r3, #7
 80006b0:	b25a      	sxtb	r2, r3
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	73fb      	strb	r3, [r7, #15]

	write8(sensor, AV_CONF, &tmp);
 80006be:	f107 030f 	add.w	r3, r7, #15
 80006c2:	461a      	mov	r2, r3
 80006c4:	2110      	movs	r1, #16
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f7ff ff3e 	bl	8000548 <write8>

}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <HTS221_Init>:
	write8(sensor, CTRL_REG2, &tmp);
}


uint8_t HTS221_Init(hts221_t* sensor, I2C_HandleTypeDef* hi2c,  uint8_t Address)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	4613      	mov	r3, r2
 80006e0:	71fb      	strb	r3, [r7, #7]
	sensor->i2c_handler = hi2c;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	601a      	str	r2, [r3, #0]
	sensor->address = (Address << 1);
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	711a      	strb	r2, [r3, #4]

	// check sensor ID
	uint8_t sensor_id;
	sensor_id = read8(sensor, WHO_AM_I);
 80006f2:	210f      	movs	r1, #15
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f7ff fee3 	bl	80004c0 <read8>
 80006fa:	4603      	mov	r3, r0
 80006fc:	75fb      	strb	r3, [r7, #23]
	if(sensor_id != 0xBC)
 80006fe:	7dfb      	ldrb	r3, [r7, #23]
 8000700:	2bbc      	cmp	r3, #188	; 0xbc
 8000702:	d001      	beq.n	8000708 <HTS221_Init+0x34>
	{
		return 1;
 8000704:	2301      	movs	r3, #1
 8000706:	e08a      	b.n	800081e <HTS221_Init+0x14a>
	}

	// read calibration coefficients
	// 1. Temperature
	sensor->T0_degc_x8 = read8(sensor, T0_degC_x8);
 8000708:	2132      	movs	r1, #50	; 0x32
 800070a:	68f8      	ldr	r0, [r7, #12]
 800070c:	f7ff fed8 	bl	80004c0 <read8>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	715a      	strb	r2, [r3, #5]
	sensor->T1_degc_x8 = read8(sensor, T1_degC_x8);
 8000718:	2133      	movs	r1, #51	; 0x33
 800071a:	68f8      	ldr	r0, [r7, #12]
 800071c:	f7ff fed0 	bl	80004c0 <read8>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	719a      	strb	r2, [r3, #6]
	sensor->T0_out = (int16_t)read16(sensor, T0_OUT);
 8000728:	213c      	movs	r1, #60	; 0x3c
 800072a:	68f8      	ldr	r0, [r7, #12]
 800072c:	f7ff fee5 	bl	80004fa <read16>
 8000730:	4603      	mov	r3, r0
 8000732:	b21a      	sxth	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	811a      	strh	r2, [r3, #8]
	sensor->T1_out = (int16_t)read16(sensor, T1_OUT);
 8000738:	213e      	movs	r1, #62	; 0x3e
 800073a:	68f8      	ldr	r0, [r7, #12]
 800073c:	f7ff fedd 	bl	80004fa <read16>
 8000740:	4603      	mov	r3, r0
 8000742:	b21a      	sxth	r2, r3
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	815a      	strh	r2, [r3, #10]

	sensor->T0_MSB = (read8(sensor, T0_T1_MSB) & 0x3) << 8;
 8000748:	2135      	movs	r1, #53	; 0x35
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f7ff feb8 	bl	80004c0 <read8>
 8000750:	4603      	mov	r3, r0
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	b29b      	uxth	r3, r3
 8000756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800075a:	b29a      	uxth	r2, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	819a      	strh	r2, [r3, #12]
	sensor->T1_MSB = (read8(sensor, T0_T1_MSB) & 0x0C) << 6;
 8000760:	2135      	movs	r1, #53	; 0x35
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	f7ff feac 	bl	80004c0 <read8>
 8000768:	4603      	mov	r3, r0
 800076a:	019b      	lsls	r3, r3, #6
 800076c:	b29b      	uxth	r3, r3
 800076e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000772:	b29a      	uxth	r2, r3
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	81da      	strh	r2, [r3, #14]

	sensor->T1_degc = ((sensor->T1_MSB) | (uint16_t)(sensor->T1_degc_x8)) >> 3;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	89db      	ldrh	r3, [r3, #14]
 800077c:	461a      	mov	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	799b      	ldrb	r3, [r3, #6]
 8000782:	4313      	orrs	r3, r2
 8000784:	10db      	asrs	r3, r3, #3
 8000786:	b29a      	uxth	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	839a      	strh	r2, [r3, #28]
	sensor->T0_degc = ((sensor->T0_MSB) | (uint16_t)(sensor->T0_degc_x8)) >> 3;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	899b      	ldrh	r3, [r3, #12]
 8000790:	461a      	mov	r2, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	795b      	ldrb	r3, [r3, #5]
 8000796:	4313      	orrs	r3, r2
 8000798:	10db      	asrs	r3, r3, #3
 800079a:	b29a      	uxth	r2, r3
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	835a      	strh	r2, [r3, #26]

	// 2. Humidity
	sensor->H0_rh_x2 = read8(sensor, H0_rH_x2);
 80007a0:	2130      	movs	r1, #48	; 0x30
 80007a2:	68f8      	ldr	r0, [r7, #12]
 80007a4:	f7ff fe8c 	bl	80004c0 <read8>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	741a      	strb	r2, [r3, #16]
	sensor->H1_rh_x2 = read8(sensor, H1_rH_x2);
 80007b0:	2131      	movs	r1, #49	; 0x31
 80007b2:	68f8      	ldr	r0, [r7, #12]
 80007b4:	f7ff fe84 	bl	80004c0 <read8>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	745a      	strb	r2, [r3, #17]
	sensor->H0_T0_out = (int16_t)read16(sensor, H0_T0_OUT);
 80007c0:	2136      	movs	r1, #54	; 0x36
 80007c2:	68f8      	ldr	r0, [r7, #12]
 80007c4:	f7ff fe99 	bl	80004fa <read16>
 80007c8:	4603      	mov	r3, r0
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	825a      	strh	r2, [r3, #18]
	sensor->H1_T0_out = (int16_t)read16(sensor, H1_T0_OUT);
 80007d0:	213a      	movs	r1, #58	; 0x3a
 80007d2:	68f8      	ldr	r0, [r7, #12]
 80007d4:	f7ff fe91 	bl	80004fa <read16>
 80007d8:	4603      	mov	r3, r0
 80007da:	b21a      	sxth	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	829a      	strh	r2, [r3, #20]
	sensor->H0_rh = (sensor->H0_rh_x2) >> 1;// dived 2
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	7c1b      	ldrb	r3, [r3, #16]
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	82da      	strh	r2, [r3, #22]
	sensor->H1_rh = (sensor->H1_rh_x2) >> 1;// dived 2
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	7c5b      	ldrb	r3, [r3, #17]
 80007f2:	085b      	lsrs	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	b21a      	sxth	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	831a      	strh	r2, [r3, #24]


	// set sample mode
	HTS221_set_temp_sample(sensor, TEMP_256);
 80007fc:	2107      	movs	r1, #7
 80007fe:	68f8      	ldr	r0, [r7, #12]
 8000800:	f7ff ff12 	bl	8000628 <HTS221_set_temp_sample>
	HTS221_set_humidity_sample(sensor, HUM_512);
 8000804:	2107      	movs	r1, #7
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	f7ff ff38 	bl	800067c <HTS221_set_humidity_sample>
	// set output data rate
	HTS221_set_output_data_rate(sensor, ONESHOT);
 800080c:	2100      	movs	r1, #0
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f7ff fede 	bl	80005d0 <HTS221_set_output_data_rate>
	// Turn on the device
 	HTS221_set_power_mode(sensor, 1);
 8000814:	2101      	movs	r1, #1
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	f7ff feb2 	bl	8000580 <HTS221_set_power_mode>
	return 0;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HTS221_get_data>:


void HTS221_get_data(hts221_t* sensor, float* temperature_value, float* humidity_val)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b088      	sub	sp, #32
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
	int32_t tmp_t, tmp_h;
	int16_t h_out, t_out;

	// wait for end of conversion

	t_out = read16(sensor, T_OUT);
 8000832:	212a      	movs	r1, #42	; 0x2a
 8000834:	68f8      	ldr	r0, [r7, #12]
 8000836:	f7ff fe60 	bl	80004fa <read16>
 800083a:	4603      	mov	r3, r0
 800083c:	83fb      	strh	r3, [r7, #30]
	h_out = read16(sensor, H_OUT);
 800083e:	2128      	movs	r1, #40	; 0x28
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f7ff fe5a 	bl	80004fa <read16>
 8000846:	4603      	mov	r3, r0
 8000848:	83bb      	strh	r3, [r7, #28]

	// humidity calculations
	tmp_h = ((int32_t)(h_out - sensor->H0_T0_out)) * ((int32_t)(sensor->H1_rh - sensor->H0_rh)); //int32_t
 800084a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8000854:	1a9b      	subs	r3, r3, r2
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 800085c:	4611      	mov	r1, r2
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8000864:	1a8a      	subs	r2, r1, r2
 8000866:	fb02 f303 	mul.w	r3, r2, r3
 800086a:	61bb      	str	r3, [r7, #24]
	*humidity_val = (float)tmp_h;
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	ee07 3a90 	vmov	s15, r3
 8000872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	edc3 7a00 	vstr	s15, [r3]
	*humidity_val = *humidity_val/(sensor->H1_T0_out - sensor->H0_T0_out) + (sensor->H0_rh);  //uint16_t
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	edd3 6a00 	vldr	s13, [r3]
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000888:	461a      	mov	r2, r3
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	ee07 3a90 	vmov	s15, r3
 8000896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800089a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80008a4:	ee07 3a90 	vmov	s15, r3
 80008a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	edc3 7a00 	vstr	s15, [r3]

	// temperature calculations
	tmp_t = ((int32_t)(t_out - sensor->T0_out)) * ((int32_t)(sensor->T1_degc - sensor->T0_degc));
 80008b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80008c0:	1a9b      	subs	r3, r3, r2
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	8b92      	ldrh	r2, [r2, #28]
 80008c6:	4611      	mov	r1, r2
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	8b52      	ldrh	r2, [r2, #26]
 80008cc:	1a8a      	subs	r2, r1, r2
 80008ce:	fb02 f303 	mul.w	r3, r2, r3
 80008d2:	617b      	str	r3, [r7, #20]
	*temperature_value = (float)tmp_t;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	ee07 3a90 	vmov	s15, r3
 80008da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	edc3 7a00 	vstr	s15, [r3]
	*temperature_value = (*temperature_value /(sensor->T1_out - sensor->T0_out) + (sensor->T0_degc));
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	edd3 6a00 	vldr	s13, [r3]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80008f0:	461a      	mov	r2, r3
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	ee07 3a90 	vmov	s15, r3
 80008fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	8b5b      	ldrh	r3, [r3, #26]
 800090a:	ee07 3a90 	vmov	s15, r3
 800090e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	edc3 7a00 	vstr	s15, [r3]
}
 800091c:	bf00      	nop
 800091e:	3720      	adds	r7, #32
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <MX_QUADSPI_Init>:
	  * @brief QUADSPI Initialization Function
	  * @param None
	  * @retval None
	  */
	 void MX_QUADSPI_Init(void)
	{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN QUADSPI_Init 1 */

	  /* USER CODE END QUADSPI_Init 1 */
	  /* QUADSPI parameter configuration*/
	  hqspi.Instance = QUADSPI;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_QUADSPI_Init+0x44>)
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <MX_QUADSPI_Init+0x48>)
 800092c:	601a      	str	r2, [r3, #0]
	  hqspi.Init.ClockPrescaler = 6;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000930:	2206      	movs	r2, #6
 8000932:	605a      	str	r2, [r3, #4]
	  hqspi.Init.FifoThreshold = 4;  // FIFO when 8 more bytes written or read
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000936:	2204      	movs	r2, #4
 8000938:	609a      	str	r2, [r3, #8]
	  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_QUADSPI_Init+0x44>)
 800093c:	2210      	movs	r2, #16
 800093e:	60da      	str	r2, [r3, #12]
	  hqspi.Init.FlashSize = 25;  	// flash size = 2**(25+1) = 2**26 = 67108864 = 64 Mbytes
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000942:	2219      	movs	r2, #25
 8000944:	611a      	str	r2, [r3, #16]
	  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
	  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_QUADSPI_Init+0x44>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
	  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000954:	f002 f90c 	bl	8002b70 <HAL_QSPI_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_QUADSPI_Init+0x3e>
	  {
		Error_Handler();
 800095e:	f000 fd03 	bl	8001368 <Error_Handler>
	  }
	  /* USER CODE BEGIN QUADSPI_Init 2 */

	  /* USER CODE END QUADSPI_Init 2 */

	}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000094 	.word	0x20000094
 800096c:	a0001000 	.word	0xa0001000

08000970 <HAL_QSPI_MspInit>:
	* This function configures the hardware resources used in this example
	* @param hqspi: QSPI handle pointer
	* @retval None
	*/
	void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
	{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
	  if(hqspi->Instance==QUADSPI)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a17      	ldr	r2, [pc, #92]	; (80009ec <HAL_QSPI_MspInit+0x7c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d128      	bne.n	80009e4 <HAL_QSPI_MspInit+0x74>
	  {
	  /* USER CODE BEGIN QUADSPI_MspInit 0 */

	  /* USER CODE END QUADSPI_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_QSPI_CLK_ENABLE();
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <HAL_QSPI_MspInit+0x80>)
 8000994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000996:	4a16      	ldr	r2, [pc, #88]	; (80009f0 <HAL_QSPI_MspInit+0x80>)
 8000998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800099c:	6513      	str	r3, [r2, #80]	; 0x50
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <HAL_QSPI_MspInit+0x80>)
 80009a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOE_CLK_ENABLE();
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_QSPI_MspInit+0x80>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <HAL_QSPI_MspInit+0x80>)
 80009b0:	f043 0310 	orr.w	r3, r3, #16
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HAL_QSPI_MspInit+0x80>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0310 	and.w	r3, r3, #16
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
		PE12     ------> QUADSPI_BK1_IO0
		PE13     ------> QUADSPI_BK1_IO1
		PE14     ------> QUADSPI_BK1_IO2
		PE15     ------> QUADSPI_BK1_IO3
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80009c2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80009c6:	617b      	str	r3, [r7, #20]
							  |GPIO_PIN_14|GPIO_PIN_15;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80009d4:	230a      	movs	r3, #10
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <HAL_QSPI_MspInit+0x84>)
 80009e0:	f000 ffc8 	bl	8001974 <HAL_GPIO_Init>
	  /* USER CODE BEGIN QUADSPI_MspInit 1 */

	  /* USER CODE END QUADSPI_MspInit 1 */
	  }

	}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	; 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	a0001000 	.word	0xa0001000
 80009f0:	40021000 	.word	0x40021000
 80009f4:	48001000 	.word	0x48001000

080009f8 <HAL_QSPI_MspDeInit>:
	* This function freeze the hardware resources used in this example
	* @param hqspi: QSPI handle pointer
	* @retval None
	*/
	void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
	{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	  if(hqspi->Instance==QUADSPI)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_QSPI_MspDeInit+0x30>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d10a      	bne.n	8000a20 <HAL_QSPI_MspDeInit+0x28>
	  {
	  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

	  /* USER CODE END QUADSPI_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_QSPI_CLK_DISABLE();
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_QSPI_MspDeInit+0x34>)
 8000a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a0e:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_QSPI_MspDeInit+0x34>)
 8000a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a14:	6513      	str	r3, [r2, #80]	; 0x50
	    PE12     ------> QUADSPI_BK1_IO0
	    PE13     ------> QUADSPI_BK1_IO1
	    PE14     ------> QUADSPI_BK1_IO2
	    PE15     ------> QUADSPI_BK1_IO3
	    */
	    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000a16:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <HAL_QSPI_MspDeInit+0x38>)
 8000a1c:	f001 f954 	bl	8001cc8 <HAL_GPIO_DeInit>
	  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

	  /* USER CODE END QUADSPI_MspDeInit 1 */
	  }

	}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	a0001000 	.word	0xa0001000
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	48001000 	.word	0x48001000

08000a34 <CSP_QUADSPI_Init>:

	/* USER CODE BEGIN 1 */

	/* QUADSPI init function */
	uint8_t CSP_QUADSPI_Init(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
		//prepare QSPI peripheral for ST-Link Utility operations
		hqspi.Instance = QUADSPI;
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <CSP_QUADSPI_Init+0x68>)
 8000a3a:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <CSP_QUADSPI_Init+0x6c>)
 8000a3c:	601a      	str	r2, [r3, #0]
		if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8000a3e:	4817      	ldr	r0, [pc, #92]	; (8000a9c <CSP_QUADSPI_Init+0x68>)
 8000a40:	f002 f90c 	bl	8002c5c <HAL_QSPI_DeInit>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <CSP_QUADSPI_Init+0x1a>
			return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e023      	b.n	8000a96 <CSP_QUADSPI_Init+0x62>
		}

		MX_QUADSPI_Init();
 8000a4e:	f7ff ff69 	bl	8000924 <MX_QUADSPI_Init>

		if (QSPI_ResetChip() != HAL_OK) {
 8000a52:	f000 fab1 	bl	8000fb8 <QSPI_ResetChip>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <CSP_QUADSPI_Init+0x2c>
			return HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e01a      	b.n	8000a96 <CSP_QUADSPI_Init+0x62>
		}

		HAL_Delay(1);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f000 fe3f 	bl	80016e4 <HAL_Delay>

		if (QSPI_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000a66:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a6a:	f000 f81b 	bl	8000aa4 <QSPI_AutoPollingMemReady>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <CSP_QUADSPI_Init+0x44>
			return HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	e00e      	b.n	8000a96 <CSP_QUADSPI_Init+0x62>
		}

		if (QSPI_WriteEnable() != HAL_OK) {
 8000a78:	f000 f84e 	bl	8000b18 <QSPI_WriteEnable>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <CSP_QUADSPI_Init+0x52>

			return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e007      	b.n	8000a96 <CSP_QUADSPI_Init+0x62>
		}

		if (QSPI_Configuration() != HAL_OK) {
 8000a86:	f000 f8fb 	bl	8000c80 <QSPI_Configuration>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <CSP_QUADSPI_Init+0x60>
			return HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	e000      	b.n	8000a96 <CSP_QUADSPI_Init+0x62>
		}

		return HAL_OK;
 8000a94:	2300      	movs	r3, #0
	}
 8000a96:	4618      	mov	r0, r3
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000094 	.word	0x20000094
 8000aa0:	a0001000 	.word	0xa0001000

08000aa4 <QSPI_AutoPollingMemReady>:
				}

		return HAL_OK;
	}

	uint8_t QSPI_AutoPollingMemReady(uint32_t timeout) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b096      	sub	sp, #88	; 0x58
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

		QSPI_CommandTypeDef sCommand;
		 QSPI_AutoPollingTypeDef sConfig;

		/* Configure automatic polling mode to wait for memory ready ------ */
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000aac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab0:	63bb      	str	r3, [r7, #56]	; 0x38
		sCommand.Instruction = READ_STATUS_REG_CMD;
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	623b      	str	r3, [r7, #32]
		sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
		sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	643b      	str	r3, [r7, #64]	; 0x40
		sCommand.DataMode = QSPI_DATA_1_LINE;
 8000abe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ac2:	647b      	str	r3, [r7, #68]	; 0x44
		sCommand.DummyCycles = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	64fb      	str	r3, [r7, #76]	; 0x4c
		sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000acc:	2300      	movs	r3, #0
 8000ace:	653b      	str	r3, [r7, #80]	; 0x50
		sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	657b      	str	r3, [r7, #84]	; 0x54

		sConfig.Match = 0x40;
 8000ad4:	2340      	movs	r3, #64	; 0x40
 8000ad6:	60bb      	str	r3, [r7, #8]
		sConfig.Mask = 0xFF;
 8000ad8:	23ff      	movs	r3, #255	; 0xff
 8000ada:	60fb      	str	r3, [r7, #12]
		sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
		sConfig.StatusBytesSize = 1;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
		sConfig.Interval = 0x10;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	613b      	str	r3, [r7, #16]
		sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000ae8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aec:	61fb      	str	r3, [r7, #28]

		if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, timeout) != HAL_OK) {
 8000aee:	f107 0208 	add.w	r2, r7, #8
 8000af2:	f107 0120 	add.w	r1, r7, #32
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4806      	ldr	r0, [pc, #24]	; (8000b14 <QSPI_AutoPollingMemReady+0x70>)
 8000afa:	f002 fa6a 	bl	8002fd2 <HAL_QSPI_AutoPolling>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <QSPI_AutoPollingMemReady+0x64>
			return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e000      	b.n	8000b0a <QSPI_AutoPollingMemReady+0x66>
		}

		return HAL_OK;
 8000b08:	2300      	movs	r3, #0
	}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3758      	adds	r7, #88	; 0x58
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000094 	.word	0x20000094

08000b18 <QSPI_WriteEnable>:

	static uint8_t QSPI_WriteEnable(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b094      	sub	sp, #80	; 0x50
 8000b1c:	af00      	add	r7, sp, #0
		QSPI_CommandTypeDef sCommand;
		QSPI_AutoPollingTypeDef sConfig;

		/* Enable write operations ------------------------------------------ */
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
		sCommand.Instruction = WRITE_ENABLE_CMD;
 8000b24:	2306      	movs	r3, #6
 8000b26:	61bb      	str	r3, [r7, #24]
		sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	63bb      	str	r3, [r7, #56]	; 0x38
		sCommand.DataMode = QSPI_DATA_NONE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63fb      	str	r3, [r7, #60]	; 0x3c
		sCommand.DummyCycles = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
		sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	647b      	str	r3, [r7, #68]	; 0x44
		sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	64bb      	str	r3, [r7, #72]	; 0x48
		sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b40:	2300      	movs	r3, #0
 8000b42:	64fb      	str	r3, [r7, #76]	; 0x4c

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000b44:	f107 0318 	add.w	r3, r7, #24
 8000b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4816      	ldr	r0, [pc, #88]	; (8000ba8 <QSPI_WriteEnable+0x90>)
 8000b50:	f002 f8a8 	bl	8002ca4 <HAL_QSPI_Command>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <QSPI_WriteEnable+0x46>
				!= HAL_OK) {
			return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e01f      	b.n	8000b9e <QSPI_WriteEnable+0x86>
		}

		/* Configure automatic polling mode to wait for write enabling ---- */
		sConfig.Match = 0x02;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	603b      	str	r3, [r7, #0]
		sConfig.Mask = 0x02;
 8000b62:	2302      	movs	r3, #2
 8000b64:	607b      	str	r3, [r7, #4]
		sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
		sConfig.StatusBytesSize = 1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
		sConfig.Interval = 0x10;
 8000b6e:	2310      	movs	r3, #16
 8000b70:	60bb      	str	r3, [r7, #8]
		sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000b72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b76:	617b      	str	r3, [r7, #20]

		sCommand.Instruction = READ_STATUS_REG_CMD;
 8000b78:	2305      	movs	r3, #5
 8000b7a:	61bb      	str	r3, [r7, #24]
		sCommand.DataMode = QSPI_DATA_1_LINE;
 8000b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b80:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000b82:	463a      	mov	r2, r7
 8000b84:	f107 0118 	add.w	r1, r7, #24
 8000b88:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b8c:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <QSPI_WriteEnable+0x90>)
 8000b8e:	f002 fa20 	bl	8002fd2 <HAL_QSPI_AutoPolling>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <QSPI_WriteEnable+0x84>
		HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
			return HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e000      	b.n	8000b9e <QSPI_WriteEnable+0x86>
		}

		return HAL_OK;
 8000b9c:	2300      	movs	r3, #0
	}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3750      	adds	r7, #80	; 0x50
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000094 	.word	0x20000094

08000bac <CSP_QSPI_Read_All_Reg>:
		}
		return HAL_OK;
	}

	uint8_t CSP_QSPI_Read_All_Reg(uint8_t* test_buffer)
	{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b090      	sub	sp, #64	; 0x40
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
		QSPI_CommandTypeDef sCommand;
		/*read status register*/
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000bb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb8:	623b      	str	r3, [r7, #32]
		sCommand.Instruction = READ_STATUS_REG_CMD;
 8000bba:	2305      	movs	r3, #5
 8000bbc:	60bb      	str	r3, [r7, #8]
		sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
		sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
		sCommand.DataMode = QSPI_DATA_1_LINE;
 8000bc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
		sCommand.DummyCycles = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
		sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	63bb      	str	r3, [r7, #56]	; 0x38
		sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	63fb      	str	r3, [r7, #60]	; 0x3c
		sCommand.NbData = 1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000be8:	4619      	mov	r1, r3
 8000bea:	4824      	ldr	r0, [pc, #144]	; (8000c7c <CSP_QSPI_Read_All_Reg+0xd0>)
 8000bec:	f002 f85a 	bl	8002ca4 <HAL_QSPI_Command>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <CSP_QSPI_Read_All_Reg+0x4e>
				!= HAL_OK) {
			return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e03b      	b.n	8000c72 <CSP_QSPI_Read_All_Reg+0xc6>
		}
		if (HAL_QSPI_Receive(&hqspi, test_buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	481e      	ldr	r0, [pc, #120]	; (8000c7c <CSP_QSPI_Read_All_Reg+0xd0>)
 8000c02:	f002 f944 	bl	8002e8e <HAL_QSPI_Receive>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <CSP_QSPI_Read_All_Reg+0x64>
			return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e030      	b.n	8000c72 <CSP_QSPI_Read_All_Reg+0xc6>
		}
		/*read configuration register*/
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c14:	623b      	str	r3, [r7, #32]
		sCommand.Instruction = READ_CFG_REG_CMD;
 8000c16:	2315      	movs	r3, #21
 8000c18:	60bb      	str	r3, [r7, #8]
		sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
		sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
		sCommand.DataMode = QSPI_DATA_1_LINE;
 8000c22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
		sCommand.DummyCycles = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
		sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c30:	2300      	movs	r3, #0
 8000c32:	63bb      	str	r3, [r7, #56]	; 0x38
		sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c34:	2300      	movs	r3, #0
 8000c36:	63fb      	str	r3, [r7, #60]	; 0x3c
		sCommand.NbData = 2;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000c3c:	f107 0308 	add.w	r3, r7, #8
 8000c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c44:	4619      	mov	r1, r3
 8000c46:	480d      	ldr	r0, [pc, #52]	; (8000c7c <CSP_QSPI_Read_All_Reg+0xd0>)
 8000c48:	f002 f82c 	bl	8002ca4 <HAL_QSPI_Command>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <CSP_QSPI_Read_All_Reg+0xaa>
				!= HAL_OK) {
			return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00d      	b.n	8000c72 <CSP_QSPI_Read_All_Reg+0xc6>
		}
		if (HAL_QSPI_Receive(&hqspi, &(test_buffer[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4806      	ldr	r0, [pc, #24]	; (8000c7c <CSP_QSPI_Read_All_Reg+0xd0>)
 8000c62:	f002 f914 	bl	8002e8e <HAL_QSPI_Receive>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <CSP_QSPI_Read_All_Reg+0xc4>
			return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e000      	b.n	8000c72 <CSP_QSPI_Read_All_Reg+0xc6>
		}
		return HAL_OK;
 8000c70:	2300      	movs	r3, #0
	}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3740      	adds	r7, #64	; 0x40
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000094 	.word	0x20000094

08000c80 <QSPI_Configuration>:

	/*Enable quad mode and set dummy cycles count*/
	uint8_t QSPI_Configuration(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b090      	sub	sp, #64	; 0x40
 8000c84:	af00      	add	r7, sp, #0

		QSPI_CommandTypeDef sCommand;
		uint8_t test_buffer[4] = { 0 };
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
		CSP_QSPI_Read_All_Reg(test_buffer);
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff8d 	bl	8000bac <CSP_QSPI_Read_All_Reg>
		/*modify buffer to enable quad mode*/
		test_buffer[0] |= 0x40;
 8000c92:	793b      	ldrb	r3, [r7, #4]
 8000c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	713b      	strb	r3, [r7, #4]

		/*set dummy cycles*/
		test_buffer[1] &= ~0xC0;
 8000c9c:	797b      	ldrb	r3, [r7, #5]
 8000c9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	717b      	strb	r3, [r7, #5]

		/*enable hight proform*/
		test_buffer[2] |= 0x02;
 8000ca6:	79bb      	ldrb	r3, [r7, #6]
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	71bb      	strb	r3, [r7, #6]

		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb4:	623b      	str	r3, [r7, #32]
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000cb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cba:	617b      	str	r3, [r7, #20]
		sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
		sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	63bb      	str	r3, [r7, #56]	; 0x38
		sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
		sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
		sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
		sCommand.DataMode = QSPI_DATA_1_LINE;
 8000cd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
		sCommand.DummyCycles = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
		sCommand.NbData = 3;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cea:	4619      	mov	r1, r3
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <QSPI_Configuration+0xa4>)
 8000cee:	f001 ffd9 	bl	8002ca4 <HAL_QSPI_Command>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <QSPI_Configuration+0x7c>
				!= HAL_OK) {
			return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e00e      	b.n	8000d1a <QSPI_Configuration+0x9a>
		}

		if (HAL_QSPI_Transmit(&hqspi, test_buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d02:	4619      	mov	r1, r3
 8000d04:	4807      	ldr	r0, [pc, #28]	; (8000d24 <QSPI_Configuration+0xa4>)
 8000d06:	f002 f82b 	bl	8002d60 <HAL_QSPI_Transmit>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d003      	beq.n	8000d18 <QSPI_Configuration+0x98>
			Error_Handler();
 8000d10:	f000 fb2a 	bl	8001368 <Error_Handler>
			return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e000      	b.n	8000d1a <QSPI_Configuration+0x9a>
		}
		return HAL_OK;
 8000d18:	2300      	movs	r3, #0
	}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3740      	adds	r7, #64	; 0x40
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000094 	.word	0x20000094

08000d28 <CSP_QSPI_EraseSector>:

	uint8_t CSP_QSPI_EraseSector(uint32_t EraseStartAddress, uint32_t EraseEndAddress) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b090      	sub	sp, #64	; 0x40
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]

		QSPI_CommandTypeDef sCommand;

		EraseStartAddress = EraseStartAddress
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d38:	f023 030f 	bic.w	r3, r3, #15
 8000d3c:	607b      	str	r3, [r7, #4]
				- EraseStartAddress % MEMORY_SECTOR_SIZE;

		/* Erasing Sequence -------------------------------------------------- */
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d42:	623b      	str	r3, [r7, #32]
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d48:	617b      	str	r3, [r7, #20]
		sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
		sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d52:	2300      	movs	r3, #0
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
		sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d56:	2300      	movs	r3, #0
 8000d58:	63fb      	str	r3, [r7, #60]	; 0x3c
		sCommand.Instruction = SECTOR_ERASE_CMD;
 8000d5a:	2320      	movs	r3, #32
 8000d5c:	60bb      	str	r3, [r7, #8]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8000d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24

		sCommand.DataMode = QSPI_DATA_NONE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
		sCommand.DummyCycles = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]

		while (EraseEndAddress >= EraseStartAddress) {
 8000d6c:	e024      	b.n	8000db8 <CSP_QSPI_EraseSector+0x90>
			sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000d74:	60fb      	str	r3, [r7, #12]

			if (QSPI_WriteEnable() != HAL_OK) {
 8000d76:	f7ff fecf 	bl	8000b18 <QSPI_WriteEnable>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <CSP_QSPI_EraseSector+0x5c>
				return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e01e      	b.n	8000dc2 <CSP_QSPI_EraseSector+0x9a>
			}

			if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480f      	ldr	r0, [pc, #60]	; (8000dcc <CSP_QSPI_EraseSector+0xa4>)
 8000d90:	f001 ff88 	bl	8002ca4 <HAL_QSPI_Command>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <CSP_QSPI_EraseSector+0x76>
					!= HAL_OK) {
				return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e011      	b.n	8000dc2 <CSP_QSPI_EraseSector+0x9a>
			}
			EraseStartAddress += MEMORY_SECTOR_SIZE;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000da4:	607b      	str	r3, [r7, #4]

			if (QSPI_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000da6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000daa:	f7ff fe7b 	bl	8000aa4 <QSPI_AutoPollingMemReady>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <CSP_QSPI_EraseSector+0x90>
				return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e004      	b.n	8000dc2 <CSP_QSPI_EraseSector+0x9a>
		while (EraseEndAddress >= EraseStartAddress) {
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d2d6      	bcs.n	8000d6e <CSP_QSPI_EraseSector+0x46>
			}
		}

		return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
	}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3740      	adds	r7, #64	; 0x40
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000094 	.word	0x20000094

08000dd0 <CSP_QSPI_WriteMemory>:

	uint8_t CSP_QSPI_WriteMemory(uint8_t* buffer, uint32_t address,uint32_t buffer_size) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b096      	sub	sp, #88	; 0x58
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]

		QSPI_CommandTypeDef sCommand;
		uint32_t end_addr, current_size, current_addr;

		/* Calculation of the size between the write address and the end of the page */
		current_addr = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	653b      	str	r3, [r7, #80]	; 0x50


		//
		while (current_addr <= address) {
 8000de0:	e003      	b.n	8000dea <CSP_QSPI_WriteMemory+0x1a>
			current_addr += MEMORY_PAGE_SIZE;
 8000de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000de4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000de8:	653b      	str	r3, [r7, #80]	; 0x50
		while (current_addr <= address) {
 8000dea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d9f7      	bls.n	8000de2 <CSP_QSPI_WriteMemory+0x12>
		}
		current_size = current_addr - address;
 8000df2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	657b      	str	r3, [r7, #84]	; 0x54

		/* Check if the size of the data is less than the remaining place in the page */
		if (current_size > buffer_size) {
 8000dfa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d901      	bls.n	8000e06 <CSP_QSPI_WriteMemory+0x36>
			current_size = buffer_size;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	657b      	str	r3, [r7, #84]	; 0x54
		}

		/* Initialize the adress variables */
		current_addr = address;
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	653b      	str	r3, [r7, #80]	; 0x50
		end_addr = address + buffer_size;
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	64fb      	str	r3, [r7, #76]	; 0x4c

		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1c:	623b      	str	r3, [r7, #32]
		sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	643b      	str	r3, [r7, #64]	; 0x40
		sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e26:	2300      	movs	r3, #0
 8000e28:	647b      	str	r3, [r7, #68]	; 0x44
		sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	64bb      	str	r3, [r7, #72]	; 0x48
		sCommand.Instruction = PAGE_PROG_CMD;
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
		sCommand.DataMode = QSPI_DATA_1_LINE;
	#else
		// four lines
		sCommand.Instruction = QUAD_PAGE_PROG_CMD;
 8000e2e:	2338      	movs	r3, #56	; 0x38
 8000e30:	617b      	str	r3, [r7, #20]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8000e32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
		sCommand.DataMode = QSPI_DATA_4_LINES;
 8000e38:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000e3c:	63bb      	str	r3, [r7, #56]	; 0x38
	#endif
		sCommand.NbData = buffer_size;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	63fb      	str	r3, [r7, #60]	; 0x3c
		sCommand.Address = address;
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	61bb      	str	r3, [r7, #24]
		sCommand.DummyCycles = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Perform the write page by page */
		do {
			sCommand.Address = current_addr;
 8000e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e4c:	61bb      	str	r3, [r7, #24]
			sCommand.NbData = current_size;
 8000e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e50:	63fb      	str	r3, [r7, #60]	; 0x3c

			if (current_size == 0) {
 8000e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d101      	bne.n	8000e5c <CSP_QSPI_WriteMemory+0x8c>
				return HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e041      	b.n	8000ee0 <CSP_QSPI_WriteMemory+0x110>
			}

			/* Enable write operations */
			if (QSPI_WriteEnable() != HAL_OK) {
 8000e5c:	f7ff fe5c 	bl	8000b18 <QSPI_WriteEnable>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <CSP_QSPI_WriteMemory+0x9a>
				return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e03a      	b.n	8000ee0 <CSP_QSPI_WriteMemory+0x110>
			}

			/* Configure the command */
			if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e72:	4619      	mov	r1, r3
 8000e74:	481c      	ldr	r0, [pc, #112]	; (8000ee8 <CSP_QSPI_WriteMemory+0x118>)
 8000e76:	f001 ff15 	bl	8002ca4 <HAL_QSPI_Command>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <CSP_QSPI_WriteMemory+0xb4>
					!= HAL_OK) {

				return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e02d      	b.n	8000ee0 <CSP_QSPI_WriteMemory+0x110>
			}

			/* Transmission of the data */
			if (HAL_QSPI_Transmit(&hqspi, buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e88:	68f9      	ldr	r1, [r7, #12]
 8000e8a:	4817      	ldr	r0, [pc, #92]	; (8000ee8 <CSP_QSPI_WriteMemory+0x118>)
 8000e8c:	f001 ff68 	bl	8002d60 <HAL_QSPI_Transmit>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <CSP_QSPI_WriteMemory+0xca>

				return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e022      	b.n	8000ee0 <CSP_QSPI_WriteMemory+0x110>
			}

			/* Configure automatic polling mode to wait for end of program */
			if (QSPI_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000e9a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e9e:	f7ff fe01 	bl	8000aa4 <QSPI_AutoPollingMemReady>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <CSP_QSPI_WriteMemory+0xdc>
				return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e019      	b.n	8000ee0 <CSP_QSPI_WriteMemory+0x110>
			}

			/* Update the address and size variables for next page programming */
			current_addr += current_size;
 8000eac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000eb0:	4413      	add	r3, r2
 8000eb2:	653b      	str	r3, [r7, #80]	; 0x50
			buffer += current_size;
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000eb8:	4413      	add	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]
			current_size =
					((current_addr + MEMORY_PAGE_SIZE) > end_addr) ?
 8000ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ebe:	f503 7380 	add.w	r3, r3, #256	; 0x100
							(end_addr - current_addr) : MEMORY_PAGE_SIZE;
 8000ec2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d203      	bcs.n	8000ed0 <CSP_QSPI_WriteMemory+0x100>
 8000ec8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	e001      	b.n	8000ed4 <CSP_QSPI_WriteMemory+0x104>
 8000ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
			current_size =
 8000ed4:	657b      	str	r3, [r7, #84]	; 0x54
		} while (current_addr <= end_addr);
 8000ed6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d9b5      	bls.n	8000e4a <CSP_QSPI_WriteMemory+0x7a>

		return HAL_OK;
 8000ede:	2300      	movs	r3, #0

	}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3758      	adds	r7, #88	; 0x58
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000094 	.word	0x20000094

08000eec <CSP_QSPI_ReadMemory>:

	uint8_t CSP_QSPI_ReadMemory(uint8_t* buffer, uint32_t address,uint32_t buffer_size)
	{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b094      	sub	sp, #80	; 0x50
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
	  QSPI_CommandTypeDef sCommand;
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
		sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	647b      	str	r3, [r7, #68]	; 0x44
		sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	64bb      	str	r3, [r7, #72]	; 0x48
		sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8000f10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.DataMode = QSPI_DATA_4_LINES;
 8000f16:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
		sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8000f1c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f20:	63bb      	str	r3, [r7, #56]	; 0x38
		sCommand.AlternateBytes = MX25R6435F_ALT_BYTES_PE_MODE;
 8000f22:	23a5      	movs	r3, #165	; 0xa5
 8000f24:	623b      	str	r3, [r7, #32]
		sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
		sCommand.NbData = buffer_size;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	643b      	str	r3, [r7, #64]	; 0x40
		sCommand.Address = address;
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	61fb      	str	r3, [r7, #28]
		sCommand.Instruction = QUAD_INOUT_READ_CMD;
 8000f32:	23eb      	movs	r3, #235	; 0xeb
 8000f34:	61bb      	str	r3, [r7, #24]
		sCommand.DummyCycles = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8000f36:	2304      	movs	r3, #4
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c


	  /* Configure the command */
	  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f3a:	f107 0318 	add.w	r3, r7, #24
 8000f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f42:	4619      	mov	r1, r3
 8000f44:	481b      	ldr	r0, [pc, #108]	; (8000fb4 <CSP_QSPI_ReadMemory+0xc8>)
 8000f46:	f001 fead 	bl	8002ca4 <HAL_QSPI_Command>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <CSP_QSPI_ReadMemory+0x68>
	    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e02b      	b.n	8000fac <CSP_QSPI_ReadMemory+0xc0>
	  }

	  /* Transmission of the data */
	  if (HAL_QSPI_Receive(&hqspi, buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f58:	68f9      	ldr	r1, [r7, #12]
 8000f5a:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <CSP_QSPI_ReadMemory+0xc8>)
 8000f5c:	f001 ff97 	bl	8002e8e <HAL_QSPI_Receive>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <CSP_QSPI_ReadMemory+0x7e>
	    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e020      	b.n	8000fac <CSP_QSPI_ReadMemory+0xc0>
	  }

	  uint8_t j[1] = {0};
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	753b      	strb	r3, [r7, #20]
	  sCommand.AlternateBytes = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8000f6e:	23aa      	movs	r3, #170	; 0xaa
 8000f70:	623b      	str	r3, [r7, #32]
	  sCommand.NbData = 1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	643b      	str	r3, [r7, #64]	; 0x40
	  /* Configure the command */
	  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f76:	f107 0318 	add.w	r3, r7, #24
 8000f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <CSP_QSPI_ReadMemory+0xc8>)
 8000f82:	f001 fe8f 	bl	8002ca4 <HAL_QSPI_Command>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <CSP_QSPI_ReadMemory+0xa4>
	    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e00d      	b.n	8000fac <CSP_QSPI_ReadMemory+0xc0>
	  }

	  /* Transmission of the data */
	  if (HAL_QSPI_Receive(&hqspi, j, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <CSP_QSPI_ReadMemory+0xc8>)
 8000f9c:	f001 ff77 	bl	8002e8e <HAL_QSPI_Receive>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <CSP_QSPI_ReadMemory+0xbe>
	    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <CSP_QSPI_ReadMemory+0xc0>
	  }
	  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
	}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3750      	adds	r7, #80	; 0x50
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000094 	.word	0x20000094

08000fb8 <QSPI_ResetChip>:
			return HAL_ERROR;
		}
		return HAL_OK;
	}

	uint8_t QSPI_ResetChip() {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b090      	sub	sp, #64	; 0x40
 8000fbc:	af00      	add	r7, sp, #0
		QSPI_CommandTypeDef sCommand;
		uint32_t temp = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
		/* Erasing Sequence -------------------------------------------------- */
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc6:	61fb      	str	r3, [r7, #28]
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fcc:	613b      	str	r3, [r7, #16]
		sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
		sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
		sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
		sCommand.Instruction = RESET_ENABLE_CMD;
 8000fde:	2366      	movs	r3, #102	; 0x66
 8000fe0:	607b      	str	r3, [r7, #4]
		sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
		sCommand.Address = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
		sCommand.DataMode = QSPI_DATA_NONE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
		sCommand.DummyCycles = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	481d      	ldr	r0, [pc, #116]	; (8001070 <QSPI_ResetChip+0xb8>)
 8000ffc:	f001 fe52 	bl	8002ca4 <HAL_QSPI_Command>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <QSPI_ResetChip+0x52>
				!= HAL_OK) {
			return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e02e      	b.n	8001068 <QSPI_ResetChip+0xb0>
		}
		for (temp = 0; temp < 0x2f; temp++) {
 800100a:	2300      	movs	r3, #0
 800100c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800100e:	e003      	b.n	8001018 <QSPI_ResetChip+0x60>
			__NOP();
 8001010:	bf00      	nop
		for (temp = 0; temp < 0x2f; temp++) {
 8001012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001014:	3301      	adds	r3, #1
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800101a:	2b2e      	cmp	r3, #46	; 0x2e
 800101c:	d9f8      	bls.n	8001010 <QSPI_ResetChip+0x58>
		}

		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800101e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001022:	61fb      	str	r3, [r7, #28]
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001028:	613b      	str	r3, [r7, #16]
		sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
		sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
		sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001032:	2300      	movs	r3, #0
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001036:	2300      	movs	r3, #0
 8001038:	63bb      	str	r3, [r7, #56]	; 0x38
		sCommand.Instruction = RESET_MEMORY_CMD;
 800103a:	2399      	movs	r3, #153	; 0x99
 800103c:	607b      	str	r3, [r7, #4]
		sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
		sCommand.Address = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
		sCommand.DataMode = QSPI_DATA_NONE;
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
		sCommand.DummyCycles = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	61bb      	str	r3, [r7, #24]

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	f241 3288 	movw	r2, #5000	; 0x1388
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <QSPI_ResetChip+0xb8>)
 8001058:	f001 fe24 	bl	8002ca4 <HAL_QSPI_Command>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <QSPI_ResetChip+0xae>
			return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <QSPI_ResetChip+0xb0>
		}
		return HAL_OK;
 8001066:	2300      	movs	r3, #0
	}
 8001068:	4618      	mov	r0, r3
 800106a:	3740      	adds	r7, #64	; 0x40
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000094 	.word	0x20000094

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001078:	f000 fabf 	bl	80015fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107c:	f000 f88e 	bl	800119c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001080:	f000 f942 	bl	8001308 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8001084:	f7ff fc4e 	bl	8000924 <MX_QUADSPI_Init>
  MX_UART4_Init();
 8001088:	f000 f90e 	bl	80012a8 <MX_UART4_Init>
  MX_I2C2_Init();
 800108c:	f000 f8cc 	bl	8001228 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  CSP_QUADSPI_Init();
 8001090:	f7ff fcd0 	bl	8000a34 <CSP_QUADSPI_Init>
  HTS221_Init(&HTS221, &hi2c2, DEV_ADDR);
 8001094:	225f      	movs	r2, #95	; 0x5f
 8001096:	4937      	ldr	r1, [pc, #220]	; (8001174 <main+0x100>)
 8001098:	4837      	ldr	r0, [pc, #220]	; (8001178 <main+0x104>)
 800109a:	f7ff fb1b 	bl	80006d4 <HTS221_Init>
  HTS221_set_output_data_rate(&HTS221, Hz_1);
 800109e:	2101      	movs	r1, #1
 80010a0:	4835      	ldr	r0, [pc, #212]	; (8001178 <main+0x104>)
 80010a2:	f7ff fa95 	bl	80005d0 <HTS221_set_output_data_rate>
  if ((CSP_QSPI_EraseSector(0x0, MEMORY_SECTOR_SIZE - 1)) != HAL_OK)
 80010a6:	f640 71ff 	movw	r1, #4095	; 0xfff
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff fe3c 	bl	8000d28 <CSP_QSPI_EraseSector>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d000      	beq.n	80010b8 <main+0x44>
    	  	  {
    		  	while(1) {}
 80010b6:	e7fe      	b.n	80010b6 <main+0x42>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ((HAL_GetTick() - time) > 1000)
 80010b8:	f000 fb08 	bl	80016cc <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	4b2f      	ldr	r3, [pc, #188]	; (800117c <main+0x108>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010c8:	d92a      	bls.n	8001120 <main+0xac>
	  		  {
	  		// read the temperature and humidity data once a second
	  		HTS221_get_data(&HTS221, &temperature_value, &humidity_value);
 80010ca:	4a2d      	ldr	r2, [pc, #180]	; (8001180 <main+0x10c>)
 80010cc:	492d      	ldr	r1, [pc, #180]	; (8001184 <main+0x110>)
 80010ce:	482a      	ldr	r0, [pc, #168]	; (8001178 <main+0x104>)
 80010d0:	f7ff fba9 	bl	8000826 <HTS221_get_data>
	  		// write the temperature and humidity values to the buffer [4 byte temperature, 4 byte humidity]
	  		memcpy(&buffer[i*8], (uint8_t *)&temperature_value, sizeof(temperature_value));
 80010d4:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <main+0x114>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4a2c      	ldr	r2, [pc, #176]	; (800118c <main+0x118>)
 80010dc:	4413      	add	r3, r2
 80010de:	4a29      	ldr	r2, [pc, #164]	; (8001184 <main+0x110>)
 80010e0:	6812      	ldr	r2, [r2, #0]
 80010e2:	601a      	str	r2, [r3, #0]
	  	    memcpy(&buffer[(i*8)+4], (uint8_t *)&humidity_value, sizeof(humidity_value));
 80010e4:	4b28      	ldr	r3, [pc, #160]	; (8001188 <main+0x114>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	3304      	adds	r3, #4
 80010ec:	4a27      	ldr	r2, [pc, #156]	; (800118c <main+0x118>)
 80010ee:	4413      	add	r3, r2
 80010f0:	4a23      	ldr	r2, [pc, #140]	; (8001180 <main+0x10c>)
 80010f2:	6812      	ldr	r2, [r2, #0]
 80010f4:	601a      	str	r2, [r3, #0]
	  			i++;
 80010f6:	4b24      	ldr	r3, [pc, #144]	; (8001188 <main+0x114>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b22      	ldr	r3, [pc, #136]	; (8001188 <main+0x114>)
 8001100:	701a      	strb	r2, [r3, #0]
	  			//if 6 seconds passed
	  			   if (i > 5)
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <main+0x114>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b05      	cmp	r3, #5
 8001108:	d905      	bls.n	8001116 <main+0xa2>
	  			  	{
	  			  	  flag = 1;
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <main+0x11c>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
	  			  	  i = 0;
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <main+0x114>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
	  			  	}
	  			  time = HAL_GetTick();
 8001116:	f000 fad9 	bl	80016cc <HAL_GetTick>
 800111a:	4603      	mov	r3, r0
 800111c:	4a17      	ldr	r2, [pc, #92]	; (800117c <main+0x108>)
 800111e:	6013      	str	r3, [r2, #0]
	  		   }

	  		      if (flag == 1)
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <main+0x11c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d1c7      	bne.n	80010b8 <main+0x44>
	  		    {
	  		    	if ((CSP_QSPI_EraseSector(0x0, sizeof(buffer)-1)) != HAL_OK)
 8001128:	212f      	movs	r1, #47	; 0x2f
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fdfc 	bl	8000d28 <CSP_QSPI_EraseSector>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d000      	beq.n	8001138 <main+0xc4>
	  		    	     {
	  		    	    	while(1) {}
 8001136:	e7fe      	b.n	8001136 <main+0xc2>
	  		    	     }

	  		    	if ((CSP_QSPI_WriteMemory(buffer, 0x0, sizeof(buffer))) != HAL_OK)
 8001138:	2230      	movs	r2, #48	; 0x30
 800113a:	2100      	movs	r1, #0
 800113c:	4813      	ldr	r0, [pc, #76]	; (800118c <main+0x118>)
 800113e:	f7ff fe47 	bl	8000dd0 <CSP_QSPI_WriteMemory>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d000      	beq.n	800114a <main+0xd6>
	  		    		 {
	  		    			while(1) {}
 8001148:	e7fe      	b.n	8001148 <main+0xd4>
	  		    		 }
	  		    	if (CSP_QSPI_ReadMemory(read_buffer, 0x0, sizeof(read_buffer)) != HAL_OK)
 800114a:	2230      	movs	r2, #48	; 0x30
 800114c:	2100      	movs	r1, #0
 800114e:	4811      	ldr	r0, [pc, #68]	; (8001194 <main+0x120>)
 8001150:	f7ff fecc 	bl	8000eec <CSP_QSPI_ReadMemory>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d000      	beq.n	800115c <main+0xe8>
	  		    			    {
	  		    			    	while(1) {}
 800115a:	e7fe      	b.n	800115a <main+0xe6>
	  		    			     }
	  		    	flag = 0;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <main+0x11c>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
	  		    	HAL_UART_Transmit(&huart4, read_buffer, sizeof(read_buffer), 1000);
 8001162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001166:	2230      	movs	r2, #48	; 0x30
 8001168:	490a      	ldr	r1, [pc, #40]	; (8001194 <main+0x120>)
 800116a:	480b      	ldr	r0, [pc, #44]	; (8001198 <main+0x124>)
 800116c:	f003 fcd6 	bl	8004b1c <HAL_UART_Transmit>
	  if ((HAL_GetTick() - time) > 1000)
 8001170:	e7a2      	b.n	80010b8 <main+0x44>
 8001172:	bf00      	nop
 8001174:	200000d8 	.word	0x200000d8
 8001178:	200001ac 	.word	0x200001ac
 800117c:	2000008c 	.word	0x2000008c
 8001180:	20000124 	.word	0x20000124
 8001184:	20000088 	.word	0x20000088
 8001188:	20000090 	.word	0x20000090
 800118c:	20000028 	.word	0x20000028
 8001190:	20000091 	.word	0x20000091
 8001194:	20000058 	.word	0x20000058
 8001198:	20000128 	.word	0x20000128

0800119c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b096      	sub	sp, #88	; 0x58
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	2244      	movs	r2, #68	; 0x44
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f004 f9a8 	bl	8005500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	463b      	mov	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011c2:	f001 fc7f 	bl	8002ac4 <HAL_PWREx_ControlVoltageScaling>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011cc:	f000 f8cc 	bl	8001368 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d0:	2302      	movs	r3, #2
 80011d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011da:	2310      	movs	r3, #16
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011de:	2300      	movs	r3, #0
 80011e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 f9a2 	bl	8003530 <HAL_RCC_OscConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80011f2:	f000 f8b9 	bl	8001368 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f6:	230f      	movs	r3, #15
 80011f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011fa:	2301      	movs	r3, #1
 80011fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800120a:	463b      	mov	r3, r7
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f002 fd74 	bl	8003cfc <HAL_RCC_ClockConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800121a:	f000 f8a5 	bl	8001368 <Error_Handler>
  }
}
 800121e:	bf00      	nop
 8001220:	3758      	adds	r7, #88	; 0x58
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <MX_I2C2_Init+0x74>)
 800122e:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <MX_I2C2_Init+0x78>)
 8001230:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x007074AF;
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_I2C2_Init+0x74>)
 8001234:	4a1b      	ldr	r2, [pc, #108]	; (80012a4 <MX_I2C2_Init+0x7c>)
 8001236:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <MX_I2C2_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_I2C2_Init+0x74>)
 8001240:	2201      	movs	r2, #1
 8001242:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_I2C2_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_I2C2_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_I2C2_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_I2C2_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_I2C2_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001262:	480e      	ldr	r0, [pc, #56]	; (800129c <MX_I2C2_Init+0x74>)
 8001264:	f000 fe24 	bl	8001eb0 <HAL_I2C_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800126e:	f000 f87b 	bl	8001368 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001272:	2100      	movs	r1, #0
 8001274:	4809      	ldr	r0, [pc, #36]	; (800129c <MX_I2C2_Init+0x74>)
 8001276:	f001 fb7f 	bl	8002978 <HAL_I2CEx_ConfigAnalogFilter>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001280:	f000 f872 	bl	8001368 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001284:	2100      	movs	r1, #0
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_I2C2_Init+0x74>)
 8001288:	f001 fbc1 	bl	8002a0e <HAL_I2CEx_ConfigDigitalFilter>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001292:	f000 f869 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200000d8 	.word	0x200000d8
 80012a0:	40005800 	.word	0x40005800
 80012a4:	007074af 	.word	0x007074af

080012a8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_UART4_Init+0x58>)
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <MX_UART4_Init+0x5c>)
 80012b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <MX_UART4_Init+0x58>)
 80012b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_UART4_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_UART4_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_UART4_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_UART4_Init+0x58>)
 80012ce:	220c      	movs	r2, #12
 80012d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <MX_UART4_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_UART4_Init+0x58>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <MX_UART4_Init+0x58>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_UART4_Init+0x58>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_UART4_Init+0x58>)
 80012ec:	f003 fbc8 	bl	8004a80 <HAL_UART_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80012f6:	f000 f837 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000128 	.word	0x20000128
 8001304:	40004c00 	.word	0x40004c00

08001308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_GPIO_Init+0x5c>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a14      	ldr	r2, [pc, #80]	; (8001364 <MX_GPIO_Init+0x5c>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_GPIO_Init+0x5c>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_GPIO_Init+0x5c>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <MX_GPIO_Init+0x5c>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_GPIO_Init+0x5c>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_GPIO_Init+0x5c>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a08      	ldr	r2, [pc, #32]	; (8001364 <MX_GPIO_Init+0x5c>)
 8001344:	f043 0310 	orr.w	r3, r3, #16
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_GPIO_Init+0x5c>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]

}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000

08001368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001370:	e7fe      	b.n	8001370 <Error_Handler+0x8>
	...

08001374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_MspInit+0x44>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_MspInit+0x44>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6613      	str	r3, [r2, #96]	; 0x60
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_MspInit+0x44>)
 8001388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_MspInit+0x44>)
 8001394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <HAL_MspInit+0x44>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	6593      	str	r3, [r2, #88]	; 0x58
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_MspInit+0x44>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000

080013bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b0ac      	sub	sp, #176	; 0xb0
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2288      	movs	r2, #136	; 0x88
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f004 f88f 	bl	8005500 <memset>
  if(hi2c->Instance==I2C2)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a21      	ldr	r2, [pc, #132]	; (800146c <HAL_I2C_MspInit+0xb0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d13b      	bne.n	8001464 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fe85 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001404:	f7ff ffb0 	bl	8001368 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_I2C_MspInit+0xb4>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	4a18      	ldr	r2, [pc, #96]	; (8001470 <HAL_I2C_MspInit+0xb4>)
 800140e:	f043 0302 	orr.w	r3, r3, #2
 8001412:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <HAL_I2C_MspInit+0xb4>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001420:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001428:	2312      	movs	r3, #18
 800142a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800143a:	2304      	movs	r3, #4
 800143c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001440:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001444:	4619      	mov	r1, r3
 8001446:	480b      	ldr	r0, [pc, #44]	; (8001474 <HAL_I2C_MspInit+0xb8>)
 8001448:	f000 fa94 	bl	8001974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <HAL_I2C_MspInit+0xb4>)
 800144e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_I2C_MspInit+0xb4>)
 8001452:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001456:	6593      	str	r3, [r2, #88]	; 0x58
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_I2C_MspInit+0xb4>)
 800145a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001464:	bf00      	nop
 8001466:	37b0      	adds	r7, #176	; 0xb0
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40005800 	.word	0x40005800
 8001470:	40021000 	.word	0x40021000
 8001474:	48000400 	.word	0x48000400

08001478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b0ac      	sub	sp, #176	; 0xb0
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2288      	movs	r2, #136	; 0x88
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f004 f831 	bl	8005500 <memset>
  if(huart->Instance==UART4)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a21      	ldr	r2, [pc, #132]	; (8001528 <HAL_UART_MspInit+0xb0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d13b      	bne.n	8001520 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80014a8:	2308      	movs	r3, #8
 80014aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fe27 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014c0:	f7ff ff52 	bl	8001368 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_UART_MspInit+0xb4>)
 80014c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c8:	4a18      	ldr	r2, [pc, #96]	; (800152c <HAL_UART_MspInit+0xb4>)
 80014ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014ce:	6593      	str	r3, [r2, #88]	; 0x58
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <HAL_UART_MspInit+0xb4>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <HAL_UART_MspInit+0xb4>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e0:	4a12      	ldr	r2, [pc, #72]	; (800152c <HAL_UART_MspInit+0xb4>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e8:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_UART_MspInit+0xb4>)
 80014ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014f4:	2303      	movs	r3, #3
 80014f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800150c:	2308      	movs	r3, #8
 800150e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151c:	f000 fa2a 	bl	8001974 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001520:	bf00      	nop
 8001522:	37b0      	adds	r7, #176	; 0xb0
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40004c00 	.word	0x40004c00
 800152c:	40021000 	.word	0x40021000

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157c:	f000 f892 	bl	80016a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}

08001584 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <SystemInit+0x20>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <SystemInit+0x20>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015ac:	f7ff ffea 	bl	8001584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b0:	480c      	ldr	r0, [pc, #48]	; (80015e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80015b2:	490d      	ldr	r1, [pc, #52]	; (80015e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <LoopForever+0xe>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b8:	e002      	b.n	80015c0 <LoopCopyDataInit>

080015ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015be:	3304      	adds	r3, #4

080015c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c4:	d3f9      	bcc.n	80015ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015c8:	4c0a      	ldr	r4, [pc, #40]	; (80015f4 <LoopForever+0x16>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015cc:	e001      	b.n	80015d2 <LoopFillZerobss>

080015ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d0:	3204      	adds	r2, #4

080015d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d4:	d3fb      	bcc.n	80015ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015d6:	f003 ff6f 	bl	80054b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015da:	f7ff fd4b 	bl	8001074 <main>

080015de <LoopForever>:

LoopForever:
    b LoopForever
 80015de:	e7fe      	b.n	80015de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015ec:	08005580 	.word	0x08005580
  ldr r2, =_sbss
 80015f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015f4:	200001d0 	.word	0x200001d0

080015f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC1_2_IRQHandler>

080015fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001604:	2003      	movs	r0, #3
 8001606:	f000 f943 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800160a:	200f      	movs	r0, #15
 800160c:	f000 f80e 	bl	800162c <HAL_InitTick>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d002      	beq.n	800161c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	71fb      	strb	r3, [r7, #7]
 800161a:	e001      	b.n	8001620 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800161c:	f7ff feaa 	bl	8001374 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001620:	79fb      	ldrb	r3, [r7, #7]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_InitTick+0x6c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d023      	beq.n	8001688 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_InitTick+0x70>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <HAL_InitTick+0x6c>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001652:	fbb2 f3f3 	udiv	r3, r2, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f941 	bl	80018de <HAL_SYSTICK_Config>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10f      	bne.n	8001682 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b0f      	cmp	r3, #15
 8001666:	d809      	bhi.n	800167c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001668:	2200      	movs	r2, #0
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f000 f919 	bl	80018a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_InitTick+0x74>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e007      	b.n	800168c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	73fb      	strb	r3, [r7, #15]
 8001680:	e004      	b.n	800168c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	73fb      	strb	r3, [r7, #15]
 8001686:	e001      	b.n	800168c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000008 	.word	0x20000008
 800169c:	20000000 	.word	0x20000000
 80016a0:	20000004 	.word	0x20000004

080016a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x20>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x24>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <HAL_IncTick+0x24>)
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000008 	.word	0x20000008
 80016c8:	200001cc 	.word	0x200001cc

080016cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return uwTick;
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <HAL_GetTick+0x14>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	200001cc 	.word	0x200001cc

080016e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7ff ffee 	bl	80016cc <HAL_GetTick>
 80016f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fc:	d005      	beq.n	800170a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_Delay+0x44>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800170a:	bf00      	nop
 800170c:	f7ff ffde 	bl	80016cc <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	429a      	cmp	r2, r3
 800171a:	d8f7      	bhi.n	800170c <HAL_Delay+0x28>
  {
  }
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000008 	.word	0x20000008

0800172c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001748:	4013      	ands	r3, r2
 800174a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175e:	4a04      	ldr	r2, [pc, #16]	; (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	60d3      	str	r3, [r2, #12]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <__NVIC_GetPriorityGrouping+0x18>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	f003 0307 	and.w	r3, r3, #7
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	; (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800185c:	d301      	bcc.n	8001862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185e:	2301      	movs	r3, #1
 8001860:	e00f      	b.n	8001882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <SysTick_Config+0x40>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186a:	210f      	movs	r1, #15
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f7ff ff8e 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <SysTick_Config+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <SysTick_Config+0x40>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010

08001890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff47 	bl	800172c <__NVIC_SetPriorityGrouping>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b8:	f7ff ff5c 	bl	8001774 <__NVIC_GetPriorityGrouping>
 80018bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f7ff ff8e 	bl	80017e4 <NVIC_EncodePriority>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff5d 	bl	8001790 <__NVIC_SetPriority>
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ffb0 	bl	800184c <SysTick_Config>
 80018ec:	4603      	mov	r3, r0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b085      	sub	sp, #20
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d008      	beq.n	8001920 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2204      	movs	r2, #4
 8001912:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e022      	b.n	8001966 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 020e 	bic.w	r2, r2, #14
 800192e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0201 	bic.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001944:	f003 021c 	and.w	r2, r3, #28
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	2101      	movs	r1, #1
 800194e:	fa01 f202 	lsl.w	r2, r1, r2
 8001952:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001964:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001982:	e17f      	b.n	8001c84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2101      	movs	r1, #1
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	4013      	ands	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8171 	beq.w	8001c7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d005      	beq.n	80019b4 <HAL_GPIO_Init+0x40>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d130      	bne.n	8001a16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ea:	2201      	movs	r2, #1
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	091b      	lsrs	r3, r3, #4
 8001a00:	f003 0201 	and.w	r2, r3, #1
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d118      	bne.n	8001a54 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a28:	2201      	movs	r2, #1
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	f003 0201 	and.w	r2, r3, #1
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d017      	beq.n	8001a90 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d123      	bne.n	8001ae4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	08da      	lsrs	r2, r3, #3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3208      	adds	r2, #8
 8001aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	220f      	movs	r2, #15
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	08da      	lsrs	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3208      	adds	r2, #8
 8001ade:	6939      	ldr	r1, [r7, #16]
 8001ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0203 	and.w	r2, r3, #3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80ac 	beq.w	8001c7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b26:	4b5f      	ldr	r3, [pc, #380]	; (8001ca4 <HAL_GPIO_Init+0x330>)
 8001b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2a:	4a5e      	ldr	r2, [pc, #376]	; (8001ca4 <HAL_GPIO_Init+0x330>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6613      	str	r3, [r2, #96]	; 0x60
 8001b32:	4b5c      	ldr	r3, [pc, #368]	; (8001ca4 <HAL_GPIO_Init+0x330>)
 8001b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b3e:	4a5a      	ldr	r2, [pc, #360]	; (8001ca8 <HAL_GPIO_Init+0x334>)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	220f      	movs	r2, #15
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b68:	d025      	beq.n	8001bb6 <HAL_GPIO_Init+0x242>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4f      	ldr	r2, [pc, #316]	; (8001cac <HAL_GPIO_Init+0x338>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01f      	beq.n	8001bb2 <HAL_GPIO_Init+0x23e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4e      	ldr	r2, [pc, #312]	; (8001cb0 <HAL_GPIO_Init+0x33c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d019      	beq.n	8001bae <HAL_GPIO_Init+0x23a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4d      	ldr	r2, [pc, #308]	; (8001cb4 <HAL_GPIO_Init+0x340>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0x236>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4c      	ldr	r2, [pc, #304]	; (8001cb8 <HAL_GPIO_Init+0x344>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_GPIO_Init+0x232>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4b      	ldr	r2, [pc, #300]	; (8001cbc <HAL_GPIO_Init+0x348>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x22e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4a      	ldr	r2, [pc, #296]	; (8001cc0 <HAL_GPIO_Init+0x34c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_GPIO_Init+0x22a>
 8001b9a:	2306      	movs	r3, #6
 8001b9c:	e00c      	b.n	8001bb8 <HAL_GPIO_Init+0x244>
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	e00a      	b.n	8001bb8 <HAL_GPIO_Init+0x244>
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	e008      	b.n	8001bb8 <HAL_GPIO_Init+0x244>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x244>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e004      	b.n	8001bb8 <HAL_GPIO_Init+0x244>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x244>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x244>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	f002 0203 	and.w	r2, r2, #3
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bc8:	4937      	ldr	r1, [pc, #220]	; (8001ca8 <HAL_GPIO_Init+0x334>)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bd6:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <HAL_GPIO_Init+0x350>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bfa:	4a32      	ldr	r2, [pc, #200]	; (8001cc4 <HAL_GPIO_Init+0x350>)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c00:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <HAL_GPIO_Init+0x350>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c24:	4a27      	ldr	r2, [pc, #156]	; (8001cc4 <HAL_GPIO_Init+0x350>)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <HAL_GPIO_Init+0x350>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c4e:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <HAL_GPIO_Init+0x350>)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_GPIO_Init+0x350>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c78:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <HAL_GPIO_Init+0x350>)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f47f ae78 	bne.w	8001984 <HAL_GPIO_Init+0x10>
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	371c      	adds	r7, #28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	48000400 	.word	0x48000400
 8001cb0:	48000800 	.word	0x48000800
 8001cb4:	48000c00 	.word	0x48000c00
 8001cb8:	48001000 	.word	0x48001000
 8001cbc:	48001400 	.word	0x48001400
 8001cc0:	48001800 	.word	0x48001800
 8001cc4:	40010400 	.word	0x40010400

08001cc8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001cd6:	e0cd      	b.n	8001e74 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 80c0 	beq.w	8001e6e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001cee:	4a68      	ldr	r2, [pc, #416]	; (8001e90 <HAL_GPIO_DeInit+0x1c8>)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d16:	d025      	beq.n	8001d64 <HAL_GPIO_DeInit+0x9c>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a5e      	ldr	r2, [pc, #376]	; (8001e94 <HAL_GPIO_DeInit+0x1cc>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d01f      	beq.n	8001d60 <HAL_GPIO_DeInit+0x98>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a5d      	ldr	r2, [pc, #372]	; (8001e98 <HAL_GPIO_DeInit+0x1d0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d019      	beq.n	8001d5c <HAL_GPIO_DeInit+0x94>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a5c      	ldr	r2, [pc, #368]	; (8001e9c <HAL_GPIO_DeInit+0x1d4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d013      	beq.n	8001d58 <HAL_GPIO_DeInit+0x90>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a5b      	ldr	r2, [pc, #364]	; (8001ea0 <HAL_GPIO_DeInit+0x1d8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d00d      	beq.n	8001d54 <HAL_GPIO_DeInit+0x8c>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a5a      	ldr	r2, [pc, #360]	; (8001ea4 <HAL_GPIO_DeInit+0x1dc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d007      	beq.n	8001d50 <HAL_GPIO_DeInit+0x88>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a59      	ldr	r2, [pc, #356]	; (8001ea8 <HAL_GPIO_DeInit+0x1e0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_GPIO_DeInit+0x84>
 8001d48:	2306      	movs	r3, #6
 8001d4a:	e00c      	b.n	8001d66 <HAL_GPIO_DeInit+0x9e>
 8001d4c:	2307      	movs	r3, #7
 8001d4e:	e00a      	b.n	8001d66 <HAL_GPIO_DeInit+0x9e>
 8001d50:	2305      	movs	r3, #5
 8001d52:	e008      	b.n	8001d66 <HAL_GPIO_DeInit+0x9e>
 8001d54:	2304      	movs	r3, #4
 8001d56:	e006      	b.n	8001d66 <HAL_GPIO_DeInit+0x9e>
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e004      	b.n	8001d66 <HAL_GPIO_DeInit+0x9e>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e002      	b.n	8001d66 <HAL_GPIO_DeInit+0x9e>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <HAL_GPIO_DeInit+0x9e>
 8001d64:	2300      	movs	r3, #0
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	f002 0203 	and.w	r2, r2, #3
 8001d6c:	0092      	lsls	r2, r2, #2
 8001d6e:	4093      	lsls	r3, r2
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d132      	bne.n	8001ddc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001d76:	4b4d      	ldr	r3, [pc, #308]	; (8001eac <HAL_GPIO_DeInit+0x1e4>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	494b      	ldr	r1, [pc, #300]	; (8001eac <HAL_GPIO_DeInit+0x1e4>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001d84:	4b49      	ldr	r3, [pc, #292]	; (8001eac <HAL_GPIO_DeInit+0x1e4>)
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	4947      	ldr	r1, [pc, #284]	; (8001eac <HAL_GPIO_DeInit+0x1e4>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001d92:	4b46      	ldr	r3, [pc, #280]	; (8001eac <HAL_GPIO_DeInit+0x1e4>)
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	4944      	ldr	r1, [pc, #272]	; (8001eac <HAL_GPIO_DeInit+0x1e4>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001da0:	4b42      	ldr	r3, [pc, #264]	; (8001eac <HAL_GPIO_DeInit+0x1e4>)
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	4940      	ldr	r1, [pc, #256]	; (8001eac <HAL_GPIO_DeInit+0x1e4>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	220f      	movs	r2, #15
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001dbe:	4a34      	ldr	r2, [pc, #208]	; (8001e90 <HAL_GPIO_DeInit+0x1c8>)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	43da      	mvns	r2, r3
 8001dce:	4830      	ldr	r0, [pc, #192]	; (8001e90 <HAL_GPIO_DeInit+0x1c8>)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	400a      	ands	r2, r1
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	2103      	movs	r1, #3
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	08da      	lsrs	r2, r3, #3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3208      	adds	r2, #8
 8001df8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	08d2      	lsrs	r2, r2, #3
 8001e10:	4019      	ands	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2103      	movs	r1, #3
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	2101      	movs	r1, #1
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	401a      	ands	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	2103      	movs	r1, #3
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	401a      	ands	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5e:	2101      	movs	r1, #1
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	401a      	ands	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f47f af2b 	bne.w	8001cd8 <HAL_GPIO_DeInit+0x10>
  }
}
 8001e82:	bf00      	nop
 8001e84:	bf00      	nop
 8001e86:	371c      	adds	r7, #28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	40010000 	.word	0x40010000
 8001e94:	48000400 	.word	0x48000400
 8001e98:	48000800 	.word	0x48000800
 8001e9c:	48000c00 	.word	0x48000c00
 8001ea0:	48001000 	.word	0x48001000
 8001ea4:	48001400 	.word	0x48001400
 8001ea8:	48001800 	.word	0x48001800
 8001eac:	40010400 	.word	0x40010400

08001eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e081      	b.n	8001fc6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fa70 	bl	80013bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2224      	movs	r2, #36	; 0x24
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0201 	bic.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d107      	bne.n	8001f2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	e006      	b.n	8001f38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d104      	bne.n	8001f4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69d9      	ldr	r1, [r3, #28]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1a      	ldr	r2, [r3, #32]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	4608      	mov	r0, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	817b      	strh	r3, [r7, #10]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	813b      	strh	r3, [r7, #8]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	f040 80f9 	bne.w	80021ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_I2C_Mem_Write+0x34>
 8001ffe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002000:	2b00      	cmp	r3, #0
 8002002:	d105      	bne.n	8002010 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800200a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0ed      	b.n	80021ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_I2C_Mem_Write+0x4e>
 800201a:	2302      	movs	r3, #2
 800201c:	e0e6      	b.n	80021ec <HAL_I2C_Mem_Write+0x21c>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002026:	f7ff fb51 	bl	80016cc <HAL_GetTick>
 800202a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	2319      	movs	r3, #25
 8002032:	2201      	movs	r2, #1
 8002034:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 fac3 	bl	80025c4 <I2C_WaitOnFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0d1      	b.n	80021ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2221      	movs	r2, #33	; 0x21
 800204c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2240      	movs	r2, #64	; 0x40
 8002054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a3a      	ldr	r2, [r7, #32]
 8002062:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002068:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002070:	88f8      	ldrh	r0, [r7, #6]
 8002072:	893a      	ldrh	r2, [r7, #8]
 8002074:	8979      	ldrh	r1, [r7, #10]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	4603      	mov	r3, r0
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 f9d3 	bl	800242c <I2C_RequestMemoryWrite>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0a9      	b.n	80021ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209c:	b29b      	uxth	r3, r3
 800209e:	2bff      	cmp	r3, #255	; 0xff
 80020a0:	d90e      	bls.n	80020c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	22ff      	movs	r2, #255	; 0xff
 80020a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	8979      	ldrh	r1, [r7, #10]
 80020b0:	2300      	movs	r3, #0
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 fc2b 	bl	8002914 <I2C_TransferConfig>
 80020be:	e00f      	b.n	80020e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	8979      	ldrh	r1, [r7, #10]
 80020d2:	2300      	movs	r3, #0
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 fc1a 	bl	8002914 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 faad 	bl	8002644 <I2C_WaitOnTXISFlagUntilTimeout>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e07b      	b.n	80021ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	781a      	ldrb	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210e:	b29b      	uxth	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d034      	beq.n	8002198 <HAL_I2C_Mem_Write+0x1c8>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002132:	2b00      	cmp	r3, #0
 8002134:	d130      	bne.n	8002198 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213c:	2200      	movs	r2, #0
 800213e:	2180      	movs	r1, #128	; 0x80
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 fa3f 	bl	80025c4 <I2C_WaitOnFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e04d      	b.n	80021ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002154:	b29b      	uxth	r3, r3
 8002156:	2bff      	cmp	r3, #255	; 0xff
 8002158:	d90e      	bls.n	8002178 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	22ff      	movs	r2, #255	; 0xff
 800215e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002164:	b2da      	uxtb	r2, r3
 8002166:	8979      	ldrh	r1, [r7, #10]
 8002168:	2300      	movs	r3, #0
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 fbcf 	bl	8002914 <I2C_TransferConfig>
 8002176:	e00f      	b.n	8002198 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002186:	b2da      	uxtb	r2, r3
 8002188:	8979      	ldrh	r1, [r7, #10]
 800218a:	2300      	movs	r3, #0
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 fbbe 	bl	8002914 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d19e      	bne.n	80020e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fa8c 	bl	80026c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e01a      	b.n	80021ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2220      	movs	r2, #32
 80021bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6859      	ldr	r1, [r3, #4]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <HAL_I2C_Mem_Write+0x224>)
 80021ca:	400b      	ands	r3, r1
 80021cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	e000      	b.n	80021ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80021ea:	2302      	movs	r3, #2
  }
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	fe00e800 	.word	0xfe00e800

080021f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	4608      	mov	r0, r1
 8002202:	4611      	mov	r1, r2
 8002204:	461a      	mov	r2, r3
 8002206:	4603      	mov	r3, r0
 8002208:	817b      	strh	r3, [r7, #10]
 800220a:	460b      	mov	r3, r1
 800220c:	813b      	strh	r3, [r7, #8]
 800220e:	4613      	mov	r3, r2
 8002210:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b20      	cmp	r3, #32
 800221c:	f040 80fd 	bne.w	800241a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_I2C_Mem_Read+0x34>
 8002226:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002228:	2b00      	cmp	r3, #0
 800222a:	d105      	bne.n	8002238 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002232:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0f1      	b.n	800241c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_I2C_Mem_Read+0x4e>
 8002242:	2302      	movs	r3, #2
 8002244:	e0ea      	b.n	800241c <HAL_I2C_Mem_Read+0x224>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800224e:	f7ff fa3d 	bl	80016cc <HAL_GetTick>
 8002252:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2319      	movs	r3, #25
 800225a:	2201      	movs	r2, #1
 800225c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f9af 	bl	80025c4 <I2C_WaitOnFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0d5      	b.n	800241c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2222      	movs	r2, #34	; 0x22
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2240      	movs	r2, #64	; 0x40
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a3a      	ldr	r2, [r7, #32]
 800228a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002298:	88f8      	ldrh	r0, [r7, #6]
 800229a:	893a      	ldrh	r2, [r7, #8]
 800229c:	8979      	ldrh	r1, [r7, #10]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	4603      	mov	r3, r0
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 f913 	bl	80024d4 <I2C_RequestMemoryRead>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0ad      	b.n	800241c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2bff      	cmp	r3, #255	; 0xff
 80022c8:	d90e      	bls.n	80022e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	22ff      	movs	r2, #255	; 0xff
 80022ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	8979      	ldrh	r1, [r7, #10]
 80022d8:	4b52      	ldr	r3, [pc, #328]	; (8002424 <HAL_I2C_Mem_Read+0x22c>)
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 fb17 	bl	8002914 <I2C_TransferConfig>
 80022e6:	e00f      	b.n	8002308 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	8979      	ldrh	r1, [r7, #10]
 80022fa:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <HAL_I2C_Mem_Read+0x22c>)
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fb06 	bl	8002914 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230e:	2200      	movs	r2, #0
 8002310:	2104      	movs	r1, #4
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f956 	bl	80025c4 <I2C_WaitOnFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e07c      	b.n	800241c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d034      	beq.n	80023c8 <HAL_I2C_Mem_Read+0x1d0>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002362:	2b00      	cmp	r3, #0
 8002364:	d130      	bne.n	80023c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236c:	2200      	movs	r2, #0
 800236e:	2180      	movs	r1, #128	; 0x80
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f927 	bl	80025c4 <I2C_WaitOnFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e04d      	b.n	800241c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002384:	b29b      	uxth	r3, r3
 8002386:	2bff      	cmp	r3, #255	; 0xff
 8002388:	d90e      	bls.n	80023a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	22ff      	movs	r2, #255	; 0xff
 800238e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002394:	b2da      	uxtb	r2, r3
 8002396:	8979      	ldrh	r1, [r7, #10]
 8002398:	2300      	movs	r3, #0
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 fab7 	bl	8002914 <I2C_TransferConfig>
 80023a6:	e00f      	b.n	80023c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	8979      	ldrh	r1, [r7, #10]
 80023ba:	2300      	movs	r3, #0
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 faa6 	bl	8002914 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d19a      	bne.n	8002308 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f974 	bl	80026c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e01a      	b.n	800241c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2220      	movs	r2, #32
 80023ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_I2C_Mem_Read+0x230>)
 80023fa:	400b      	ands	r3, r1
 80023fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	e000      	b.n	800241c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800241a:	2302      	movs	r3, #2
  }
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	80002400 	.word	0x80002400
 8002428:	fe00e800 	.word	0xfe00e800

0800242c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	4608      	mov	r0, r1
 8002436:	4611      	mov	r1, r2
 8002438:	461a      	mov	r2, r3
 800243a:	4603      	mov	r3, r0
 800243c:	817b      	strh	r3, [r7, #10]
 800243e:	460b      	mov	r3, r1
 8002440:	813b      	strh	r3, [r7, #8]
 8002442:	4613      	mov	r3, r2
 8002444:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	8979      	ldrh	r1, [r7, #10]
 800244c:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <I2C_RequestMemoryWrite+0xa4>)
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 fa5d 	bl	8002914 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	69b9      	ldr	r1, [r7, #24]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f8f0 	bl	8002644 <I2C_WaitOnTXISFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e02c      	b.n	80024c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d105      	bne.n	8002480 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002474:	893b      	ldrh	r3, [r7, #8]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	629a      	str	r2, [r3, #40]	; 0x28
 800247e:	e015      	b.n	80024ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002480:	893b      	ldrh	r3, [r7, #8]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	b29b      	uxth	r3, r3
 8002486:	b2da      	uxtb	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	69b9      	ldr	r1, [r7, #24]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f8d6 	bl	8002644 <I2C_WaitOnTXISFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e012      	b.n	80024c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024a2:	893b      	ldrh	r3, [r7, #8]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2200      	movs	r2, #0
 80024b4:	2180      	movs	r1, #128	; 0x80
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f884 	bl	80025c4 <I2C_WaitOnFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	80002000 	.word	0x80002000

080024d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	4608      	mov	r0, r1
 80024de:	4611      	mov	r1, r2
 80024e0:	461a      	mov	r2, r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	817b      	strh	r3, [r7, #10]
 80024e6:	460b      	mov	r3, r1
 80024e8:	813b      	strh	r3, [r7, #8]
 80024ea:	4613      	mov	r3, r2
 80024ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	8979      	ldrh	r1, [r7, #10]
 80024f4:	4b20      	ldr	r3, [pc, #128]	; (8002578 <I2C_RequestMemoryRead+0xa4>)
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2300      	movs	r3, #0
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fa0a 	bl	8002914 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002500:	69fa      	ldr	r2, [r7, #28]
 8002502:	69b9      	ldr	r1, [r7, #24]
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f89d 	bl	8002644 <I2C_WaitOnTXISFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e02c      	b.n	800256e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d105      	bne.n	8002526 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800251a:	893b      	ldrh	r3, [r7, #8]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	629a      	str	r2, [r3, #40]	; 0x28
 8002524:	e015      	b.n	8002552 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002526:	893b      	ldrh	r3, [r7, #8]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	b29b      	uxth	r3, r3
 800252c:	b2da      	uxtb	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	69b9      	ldr	r1, [r7, #24]
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f883 	bl	8002644 <I2C_WaitOnTXISFlagUntilTimeout>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e012      	b.n	800256e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002548:	893b      	ldrh	r3, [r7, #8]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2200      	movs	r2, #0
 800255a:	2140      	movs	r1, #64	; 0x40
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f831 	bl	80025c4 <I2C_WaitOnFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	80002000 	.word	0x80002000

0800257c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b02      	cmp	r3, #2
 8002590:	d103      	bne.n	800259a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2200      	movs	r2, #0
 8002598:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d007      	beq.n	80025b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	619a      	str	r2, [r3, #24]
  }
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	4613      	mov	r3, r2
 80025d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025d4:	e022      	b.n	800261c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d01e      	beq.n	800261c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025de:	f7ff f875 	bl	80016cc <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d302      	bcc.n	80025f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d113      	bne.n	800261c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e00f      	b.n	800263c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4013      	ands	r3, r2
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	429a      	cmp	r2, r3
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	429a      	cmp	r2, r3
 8002638:	d0cd      	beq.n	80025d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002650:	e02c      	b.n	80026ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68b9      	ldr	r1, [r7, #8]
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f870 	bl	800273c <I2C_IsErrorOccurred>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e02a      	b.n	80026bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d01e      	beq.n	80026ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266e:	f7ff f82d 	bl	80016cc <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	429a      	cmp	r2, r3
 800267c:	d302      	bcc.n	8002684 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d113      	bne.n	80026ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	f043 0220 	orr.w	r2, r3, #32
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e007      	b.n	80026bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d1cb      	bne.n	8002652 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026d0:	e028      	b.n	8002724 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f830 	bl	800273c <I2C_IsErrorOccurred>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e026      	b.n	8002734 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e6:	f7fe fff1 	bl	80016cc <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d302      	bcc.n	80026fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d113      	bne.n	8002724 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	f043 0220 	orr.w	r2, r3, #32
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e007      	b.n	8002734 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b20      	cmp	r3, #32
 8002730:	d1cf      	bne.n	80026d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b00      	cmp	r3, #0
 8002766:	d075      	beq.n	8002854 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2210      	movs	r2, #16
 800276e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002770:	e056      	b.n	8002820 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d052      	beq.n	8002820 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800277a:	f7fe ffa7 	bl	80016cc <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	429a      	cmp	r2, r3
 8002788:	d302      	bcc.n	8002790 <I2C_IsErrorOccurred+0x54>
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d147      	bne.n	8002820 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027b2:	d12e      	bne.n	8002812 <I2C_IsErrorOccurred+0xd6>
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027ba:	d02a      	beq.n	8002812 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d027      	beq.n	8002812 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027d0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027d2:	f7fe ff7b 	bl	80016cc <HAL_GetTick>
 80027d6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027d8:	e01b      	b.n	8002812 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80027da:	f7fe ff77 	bl	80016cc <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b19      	cmp	r3, #25
 80027e6:	d914      	bls.n	8002812 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b20      	cmp	r3, #32
 800281e:	d1dc      	bne.n	80027da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b20      	cmp	r3, #32
 800282c:	d003      	beq.n	8002836 <I2C_IsErrorOccurred+0xfa>
 800282e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002832:	2b00      	cmp	r3, #0
 8002834:	d09d      	beq.n	8002772 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002836:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800283a:	2b00      	cmp	r3, #0
 800283c:	d103      	bne.n	8002846 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2220      	movs	r2, #32
 8002844:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	f043 0304 	orr.w	r3, r3, #4
 800284c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00b      	beq.n	800287e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002876:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	f043 0308 	orr.w	r3, r3, #8
 800288e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002898:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00b      	beq.n	80028c2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	f043 0302 	orr.w	r3, r3, #2
 80028b0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80028c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d01c      	beq.n	8002904 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f7ff fe56 	bl	800257c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <I2C_IsErrorOccurred+0x1d4>)
 80028dc:	400b      	ands	r3, r1
 80028de:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002908:	4618      	mov	r0, r3
 800290a:	3728      	adds	r7, #40	; 0x28
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	fe00e800 	.word	0xfe00e800

08002914 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	817b      	strh	r3, [r7, #10]
 8002922:	4613      	mov	r3, r2
 8002924:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002926:	897b      	ldrh	r3, [r7, #10]
 8002928:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800292c:	7a7b      	ldrb	r3, [r7, #9]
 800292e:	041b      	lsls	r3, r3, #16
 8002930:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002934:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	4313      	orrs	r3, r2
 800293e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002942:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	0d5b      	lsrs	r3, r3, #21
 800294e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002952:	4b08      	ldr	r3, [pc, #32]	; (8002974 <I2C_TransferConfig+0x60>)
 8002954:	430b      	orrs	r3, r1
 8002956:	43db      	mvns	r3, r3
 8002958:	ea02 0103 	and.w	r1, r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002966:	bf00      	nop
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	03ff63ff 	.word	0x03ff63ff

08002978 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b20      	cmp	r3, #32
 800298c:	d138      	bne.n	8002a00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002998:	2302      	movs	r3, #2
 800299a:	e032      	b.n	8002a02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2224      	movs	r2, #36	; 0x24
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6819      	ldr	r1, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	e000      	b.n	8002a02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a00:	2302      	movs	r3, #2
  }
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b085      	sub	sp, #20
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d139      	bne.n	8002a98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e033      	b.n	8002a9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2224      	movs	r2, #36	; 0x24
 8002a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0201 	bic.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	e000      	b.n	8002a9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a98:	2302      	movs	r3, #2
  }
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002aac:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40007000 	.word	0x40007000

08002ac4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad2:	d130      	bne.n	8002b36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad4:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae0:	d038      	beq.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ae2:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002aea:	4a1e      	ldr	r2, [pc, #120]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002af2:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2232      	movs	r2, #50	; 0x32
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	4a1b      	ldr	r2, [pc, #108]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0c9b      	lsrs	r3, r3, #18
 8002b04:	3301      	adds	r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b08:	e002      	b.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1c:	d102      	bne.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f2      	bne.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b30:	d110      	bne.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e00f      	b.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b42:	d007      	beq.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b44:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b4c:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40007000 	.word	0x40007000
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	431bde83 	.word	0x431bde83

08002b70 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7fe fda8 	bl	80016cc <HAL_GetTick>
 8002b7c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e063      	b.n	8002c50 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10b      	bne.n	8002bac <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7fd fee7 	bl	8000970 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002ba2:	f241 3188 	movw	r1, #5000	; 0x1388
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 faf7 	bl	800319a <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	021a      	lsls	r2, r3, #8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2120      	movs	r1, #32
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 faef 	bl	80031b6 <QSPI_WaitFlagStateUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002bdc:	7afb      	ldrb	r3, [r7, #11]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d131      	bne.n	8002c46 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002bec:	f023 0310 	bic.w	r3, r3, #16
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6852      	ldr	r2, [r2, #4]
 8002bf4:	0611      	lsls	r1, r2, #24
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68d2      	ldr	r2, [r2, #12]
 8002bfa:	4311      	orrs	r1, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	430b      	orrs	r3, r1
 8002c02:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <HAL_QSPI_Init+0xe8>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6912      	ldr	r2, [r2, #16]
 8002c12:	0411      	lsls	r1, r2, #16
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6952      	ldr	r2, [r2, #20]
 8002c18:	4311      	orrs	r1, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6992      	ldr	r2, [r2, #24]
 8002c1e:	4311      	orrs	r1, r2
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	430b      	orrs	r3, r1
 8002c26:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002c4e:	7afb      	ldrb	r3, [r7, #11]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	ffe0f8fe 	.word	0xffe0f8fe

08002c5c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e016      	b.n	8002c9c <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0201 	bic.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fd feba 	bl	80009f8 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002cb0:	f7fe fd0c 	bl	80016cc <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_QSPI_Command+0x22>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e048      	b.n	8002d58 <HAL_QSPI_Command+0xb4>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d137      	bne.n	8002d4a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2120      	movs	r1, #32
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 fa5f 	bl	80031b6 <QSPI_WaitFlagStateUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d125      	bne.n	8002d4e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002d02:	2200      	movs	r2, #0
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fa8c 	bl	8003224 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d115      	bne.n	8002d40 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	2102      	movs	r1, #2
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fa49 	bl	80031b6 <QSPI_WaitFlagStateUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8002d28:	7dfb      	ldrb	r3, [r7, #23]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10f      	bne.n	8002d4e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2202      	movs	r2, #2
 8002d34:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002d3e:	e006      	b.n	8002d4e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002d48:	e001      	b.n	8002d4e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002d70:	f7fe fcac 	bl	80016cc <HAL_GetTick>
 8002d74:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3320      	adds	r3, #32
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_QSPI_Transmit+0x2e>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e07b      	b.n	8002e86 <HAL_QSPI_Transmit+0x126>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d16a      	bne.n	8002e78 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d05b      	beq.n	8002e66 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2212      	movs	r2, #18
 8002db2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002de2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8002de4:	e01b      	b.n	8002e1e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2201      	movs	r2, #1
 8002dee:	2104      	movs	r1, #4
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f9e0 	bl	80031b6 <QSPI_WaitFlagStateUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002dfa:	7ffb      	ldrb	r3, [r7, #31]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d113      	bne.n	8002e28 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	781a      	ldrb	r2, [r3, #0]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	1e5a      	subs	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1df      	bne.n	8002de6 <HAL_QSPI_Transmit+0x86>
 8002e26:	e000      	b.n	8002e2a <HAL_QSPI_Transmit+0xca>
          break;
 8002e28:	bf00      	nop
      }

      if (status == HAL_OK)
 8002e2a:	7ffb      	ldrb	r3, [r7, #31]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d115      	bne.n	8002e5c <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2201      	movs	r2, #1
 8002e38:	2102      	movs	r1, #2
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f9bb 	bl	80031b6 <QSPI_WaitFlagStateUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002e44:	7ffb      	ldrb	r3, [r7, #31]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d108      	bne.n	8002e5c <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f934 	bl	80030c0 <HAL_QSPI_Abort>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002e64:	e00a      	b.n	8002e7c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6a:	f043 0208 	orr.w	r2, r3, #8
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	77fb      	strb	r3, [r7, #31]
 8002e76:	e001      	b.n	8002e7c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002e84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b08a      	sub	sp, #40	; 0x28
 8002e92:	af02      	add	r7, sp, #8
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002e9e:	f7fe fc15 	bl	80016cc <HAL_GetTick>
 8002ea2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3320      	adds	r3, #32
 8002eb2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_QSPI_Receive+0x36>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e082      	b.n	8002fca <HAL_QSPI_Receive+0x13c>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d171      	bne.n	8002fbc <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d062      	beq.n	8002faa <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2222      	movs	r2, #34	; 0x22
 8002ee8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f1c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8002f26:	e01c      	b.n	8002f62 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	2106      	movs	r1, #6
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f93f 	bl	80031b6 <QSPI_WaitFlagStateUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8002f3c:	7ffb      	ldrb	r3, [r7, #31]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d114      	bne.n	8002f6c <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	7812      	ldrb	r2, [r2, #0]
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	1e5a      	subs	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1de      	bne.n	8002f28 <HAL_QSPI_Receive+0x9a>
 8002f6a:	e000      	b.n	8002f6e <HAL_QSPI_Receive+0xe0>
          break;
 8002f6c:	bf00      	nop
      }

      if (status == HAL_OK)
 8002f6e:	7ffb      	ldrb	r3, [r7, #31]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d115      	bne.n	8002fa0 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f919 	bl	80031b6 <QSPI_WaitFlagStateUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8002f88:	7ffb      	ldrb	r3, [r7, #31]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d108      	bne.n	8002fa0 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2202      	movs	r2, #2
 8002f94:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f892 	bl	80030c0 <HAL_QSPI_Abort>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002fa8:	e00a      	b.n	8002fc0 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fae:	f043 0208 	orr.w	r2, r3, #8
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	77fb      	strb	r3, [r7, #31]
 8002fba:	e001      	b.n	8002fc0 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002fc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3720      	adds	r7, #32
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b088      	sub	sp, #32
 8002fd6:	af02      	add	r7, sp, #8
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
 8002fde:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7fe fb74 	bl	80016cc <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_QSPI_AutoPolling+0x24>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e060      	b.n	80030b8 <HAL_QSPI_AutoPolling+0xe6>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d14f      	bne.n	80030aa <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2242      	movs	r2, #66	; 0x42
 8003014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2200      	movs	r2, #0
 8003020:	2120      	movs	r1, #32
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f8c7 	bl	80031b6 <QSPI_WaitFlagStateUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d13d      	bne.n	80030ae <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6852      	ldr	r2, [r2, #4]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6892      	ldr	r2, [r2, #8]
 800304e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	431a      	orrs	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003068:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003072:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f8d3 	bl	8003224 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2201      	movs	r2, #1
 8003086:	2108      	movs	r1, #8
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f894 	bl	80031b6 <QSPI_WaitFlagStateUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003092:	7dfb      	ldrb	r3, [r7, #23]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10a      	bne.n	80030ae <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2208      	movs	r2, #8
 800309e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80030a8:	e001      	b.n	80030ae <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80030aa:	2302      	movs	r3, #2
 80030ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80030cc:	f7fe fafe 	bl	80016cc <HAL_GetTick>
 80030d0:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d056      	beq.n	8003190 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d017      	beq.n	8003128 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0204 	bic.w	r2, r2, #4
 8003106:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe fbf2 	bl	80018f6 <HAL_DMA_Abort>
 8003112:	4603      	mov	r3, r0
 8003114:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003120:	f043 0204 	orr.w	r2, r3, #4
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0202 	orr.w	r2, r2, #2
 8003136:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2201      	movs	r2, #1
 8003142:	2102      	movs	r1, #2
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f836 	bl	80031b6 <QSPI_WaitFlagStateUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10e      	bne.n	8003172 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2202      	movs	r2, #2
 800315a:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2200      	movs	r2, #0
 8003166:	2120      	movs	r1, #32
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f824 	bl	80031b6 <QSPI_WaitFlagStateUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10b      	bne.n	8003190 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003186:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80031c6:	e01a      	b.n	80031fe <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ce:	d016      	beq.n	80031fe <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d0:	f7fe fa7c 	bl	80016cc <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d302      	bcc.n	80031e6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10b      	bne.n	80031fe <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2204      	movs	r2, #4
 80031ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	f043 0201 	orr.w	r2, r3, #1
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e00e      	b.n	800321c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	429a      	cmp	r2, r3
 8003218:	d1d6      	bne.n	80031c8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	2b00      	cmp	r3, #0
 8003236:	d009      	beq.n	800324c <QSPI_Config+0x28>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800323e:	d005      	beq.n	800324c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3a01      	subs	r2, #1
 800324a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80b9 	beq.w	80033c8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d05f      	beq.n	800331e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	6892      	ldr	r2, [r2, #8]
 8003266:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d031      	beq.n	80032d4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	431a      	orrs	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327e:	431a      	orrs	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	431a      	orrs	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	049b      	lsls	r3, r3, #18
 800328c:	431a      	orrs	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	431a      	orrs	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	431a      	orrs	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	431a      	orrs	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	431a      	orrs	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	ea42 0103 	orr.w	r1, r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80032c4:	f000 812e 	beq.w	8003524 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	6852      	ldr	r2, [r2, #4]
 80032d0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80032d2:	e127      	b.n	8003524 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	431a      	orrs	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e2:	431a      	orrs	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	431a      	orrs	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	049b      	lsls	r3, r3, #18
 80032f0:	431a      	orrs	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	431a      	orrs	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	431a      	orrs	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	ea42 0103 	orr.w	r1, r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	430a      	orrs	r2, r1
 800331a:	615a      	str	r2, [r3, #20]
}
 800331c:	e102      	b.n	8003524 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d02e      	beq.n	8003384 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	431a      	orrs	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003334:	431a      	orrs	r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	431a      	orrs	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	049b      	lsls	r3, r3, #18
 8003342:	431a      	orrs	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	431a      	orrs	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	431a      	orrs	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	431a      	orrs	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	431a      	orrs	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	ea42 0103 	orr.w	r1, r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	430a      	orrs	r2, r1
 800336c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003374:	f000 80d6 	beq.w	8003524 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	6852      	ldr	r2, [r2, #4]
 8003380:	619a      	str	r2, [r3, #24]
}
 8003382:	e0cf      	b.n	8003524 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	431a      	orrs	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003392:	431a      	orrs	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	431a      	orrs	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	049b      	lsls	r3, r3, #18
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	431a      	orrs	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	ea42 0103 	orr.w	r1, r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	615a      	str	r2, [r3, #20]
}
 80033c6:	e0ad      	b.n	8003524 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d058      	beq.n	8003482 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	6892      	ldr	r2, [r2, #8]
 80033d8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d02d      	beq.n	800343e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	431a      	orrs	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f0:	431a      	orrs	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	431a      	orrs	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	049b      	lsls	r3, r3, #18
 80033fe:	431a      	orrs	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	431a      	orrs	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	431a      	orrs	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	431a      	orrs	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	431a      	orrs	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	ea42 0103 	orr.w	r1, r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	430a      	orrs	r2, r1
 8003428:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003430:	d078      	beq.n	8003524 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	6852      	ldr	r2, [r2, #4]
 800343a:	619a      	str	r2, [r3, #24]
}
 800343c:	e072      	b.n	8003524 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	431a      	orrs	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344c:	431a      	orrs	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	431a      	orrs	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	049b      	lsls	r3, r3, #18
 800345a:	431a      	orrs	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	431a      	orrs	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	431a      	orrs	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	431a      	orrs	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	ea42 0103 	orr.w	r1, r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	430a      	orrs	r2, r1
 800347e:	615a      	str	r2, [r3, #20]
}
 8003480:	e050      	b.n	8003524 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d02a      	beq.n	80034e0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	431a      	orrs	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003498:	431a      	orrs	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	431a      	orrs	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	049b      	lsls	r3, r3, #18
 80034a6:	431a      	orrs	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	431a      	orrs	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	ea42 0103 	orr.w	r1, r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80034d2:	d027      	beq.n	8003524 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	6852      	ldr	r2, [r2, #4]
 80034dc:	619a      	str	r2, [r3, #24]
}
 80034de:	e021      	b.n	8003524 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01d      	beq.n	8003524 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	431a      	orrs	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f6:	431a      	orrs	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	049b      	lsls	r3, r3, #18
 8003504:	431a      	orrs	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	431a      	orrs	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	431a      	orrs	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	ea42 0103 	orr.w	r1, r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	430a      	orrs	r2, r1
 8003522:	615a      	str	r2, [r3, #20]
}
 8003524:	bf00      	nop
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e3d4      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003542:	4ba1      	ldr	r3, [pc, #644]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800354c:	4b9e      	ldr	r3, [pc, #632]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80e4 	beq.w	800372c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d007      	beq.n	800357a <HAL_RCC_OscConfig+0x4a>
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b0c      	cmp	r3, #12
 800356e:	f040 808b 	bne.w	8003688 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b01      	cmp	r3, #1
 8003576:	f040 8087 	bne.w	8003688 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800357a:	4b93      	ldr	r3, [pc, #588]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_RCC_OscConfig+0x62>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e3ac      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1a      	ldr	r2, [r3, #32]
 8003596:	4b8c      	ldr	r3, [pc, #560]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d004      	beq.n	80035ac <HAL_RCC_OscConfig+0x7c>
 80035a2:	4b89      	ldr	r3, [pc, #548]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035aa:	e005      	b.n	80035b8 <HAL_RCC_OscConfig+0x88>
 80035ac:	4b86      	ldr	r3, [pc, #536]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80035ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b2:	091b      	lsrs	r3, r3, #4
 80035b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d223      	bcs.n	8003604 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fd41 	bl	8004048 <RCC_SetFlashLatencyFromMSIRange>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e38d      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035d0:	4b7d      	ldr	r3, [pc, #500]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a7c      	ldr	r2, [pc, #496]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80035d6:	f043 0308 	orr.w	r3, r3, #8
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	4b7a      	ldr	r3, [pc, #488]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	4977      	ldr	r1, [pc, #476]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ee:	4b76      	ldr	r3, [pc, #472]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	021b      	lsls	r3, r3, #8
 80035fc:	4972      	ldr	r1, [pc, #456]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]
 8003602:	e025      	b.n	8003650 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003604:	4b70      	ldr	r3, [pc, #448]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a6f      	ldr	r2, [pc, #444]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 800360a:	f043 0308 	orr.w	r3, r3, #8
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	4b6d      	ldr	r3, [pc, #436]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	496a      	ldr	r1, [pc, #424]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003622:	4b69      	ldr	r3, [pc, #420]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	4965      	ldr	r1, [pc, #404]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 8003632:	4313      	orrs	r3, r2
 8003634:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d109      	bne.n	8003650 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fd01 	bl	8004048 <RCC_SetFlashLatencyFromMSIRange>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e34d      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003650:	f000 fc36 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 8003654:	4602      	mov	r2, r0
 8003656:	4b5c      	ldr	r3, [pc, #368]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	091b      	lsrs	r3, r3, #4
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	495a      	ldr	r1, [pc, #360]	; (80037cc <HAL_RCC_OscConfig+0x29c>)
 8003662:	5ccb      	ldrb	r3, [r1, r3]
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
 800366c:	4a58      	ldr	r2, [pc, #352]	; (80037d0 <HAL_RCC_OscConfig+0x2a0>)
 800366e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003670:	4b58      	ldr	r3, [pc, #352]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7fd ffd9 	bl	800162c <HAL_InitTick>
 800367a:	4603      	mov	r3, r0
 800367c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d052      	beq.n	800372a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	e331      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d032      	beq.n	80036f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003690:	4b4d      	ldr	r3, [pc, #308]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a4c      	ldr	r2, [pc, #304]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800369c:	f7fe f816 	bl	80016cc <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036a4:	f7fe f812 	bl	80016cc <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e31a      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036b6:	4b44      	ldr	r3, [pc, #272]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036c2:	4b41      	ldr	r3, [pc, #260]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a40      	ldr	r2, [pc, #256]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80036c8:	f043 0308 	orr.w	r3, r3, #8
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	4b3e      	ldr	r3, [pc, #248]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	493b      	ldr	r1, [pc, #236]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036e0:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	4936      	ldr	r1, [pc, #216]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]
 80036f4:	e01a      	b.n	800372c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036f6:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a33      	ldr	r2, [pc, #204]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003702:	f7fd ffe3 	bl	80016cc <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800370a:	f7fd ffdf 	bl	80016cc <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e2e7      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800371c:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f0      	bne.n	800370a <HAL_RCC_OscConfig+0x1da>
 8003728:	e000      	b.n	800372c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800372a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d074      	beq.n	8003822 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b08      	cmp	r3, #8
 800373c:	d005      	beq.n	800374a <HAL_RCC_OscConfig+0x21a>
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	2b0c      	cmp	r3, #12
 8003742:	d10e      	bne.n	8003762 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b03      	cmp	r3, #3
 8003748:	d10b      	bne.n	8003762 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374a:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d064      	beq.n	8003820 <HAL_RCC_OscConfig+0x2f0>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d160      	bne.n	8003820 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e2c4      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376a:	d106      	bne.n	800377a <HAL_RCC_OscConfig+0x24a>
 800376c:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 8003772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	e01d      	b.n	80037b6 <HAL_RCC_OscConfig+0x286>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003782:	d10c      	bne.n	800379e <HAL_RCC_OscConfig+0x26e>
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0f      	ldr	r2, [pc, #60]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 800378a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a0c      	ldr	r2, [pc, #48]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 8003796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	e00b      	b.n	80037b6 <HAL_RCC_OscConfig+0x286>
 800379e:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80037a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a06      	ldr	r2, [pc, #24]	; (80037c8 <HAL_RCC_OscConfig+0x298>)
 80037b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d01c      	beq.n	80037f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037be:	f7fd ff85 	bl	80016cc <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037c4:	e011      	b.n	80037ea <HAL_RCC_OscConfig+0x2ba>
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000
 80037cc:	08005528 	.word	0x08005528
 80037d0:	20000000 	.word	0x20000000
 80037d4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fd ff78 	bl	80016cc <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e280      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ea:	4baf      	ldr	r3, [pc, #700]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0x2a8>
 80037f6:	e014      	b.n	8003822 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fd ff68 	bl	80016cc <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003800:	f7fd ff64 	bl	80016cc <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	; 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e26c      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003812:	4ba5      	ldr	r3, [pc, #660]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x2d0>
 800381e:	e000      	b.n	8003822 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d060      	beq.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b04      	cmp	r3, #4
 8003832:	d005      	beq.n	8003840 <HAL_RCC_OscConfig+0x310>
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2b0c      	cmp	r3, #12
 8003838:	d119      	bne.n	800386e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b02      	cmp	r3, #2
 800383e:	d116      	bne.n	800386e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003840:	4b99      	ldr	r3, [pc, #612]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_OscConfig+0x328>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e249      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003858:	4b93      	ldr	r3, [pc, #588]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	061b      	lsls	r3, r3, #24
 8003866:	4990      	ldr	r1, [pc, #576]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003868:	4313      	orrs	r3, r2
 800386a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800386c:	e040      	b.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d023      	beq.n	80038be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003876:	4b8c      	ldr	r3, [pc, #560]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a8b      	ldr	r2, [pc, #556]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 800387c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fd ff23 	bl	80016cc <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388a:	f7fd ff1f 	bl	80016cc <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e227      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800389c:	4b82      	ldr	r3, [pc, #520]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a8:	4b7f      	ldr	r3, [pc, #508]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	061b      	lsls	r3, r3, #24
 80038b6:	497c      	ldr	r1, [pc, #496]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
 80038bc:	e018      	b.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038be:	4b7a      	ldr	r3, [pc, #488]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a79      	ldr	r2, [pc, #484]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 80038c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ca:	f7fd feff 	bl	80016cc <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d2:	f7fd fefb 	bl	80016cc <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e203      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038e4:	4b70      	ldr	r3, [pc, #448]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f0      	bne.n	80038d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d03c      	beq.n	8003976 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01c      	beq.n	800393e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003904:	4b68      	ldr	r3, [pc, #416]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390a:	4a67      	ldr	r2, [pc, #412]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003914:	f7fd feda 	bl	80016cc <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800391c:	f7fd fed6 	bl	80016cc <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e1de      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800392e:	4b5e      	ldr	r3, [pc, #376]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0ef      	beq.n	800391c <HAL_RCC_OscConfig+0x3ec>
 800393c:	e01b      	b.n	8003976 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800393e:	4b5a      	ldr	r3, [pc, #360]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003944:	4a58      	ldr	r2, [pc, #352]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394e:	f7fd febd 	bl	80016cc <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003956:	f7fd feb9 	bl	80016cc <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e1c1      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003968:	4b4f      	ldr	r3, [pc, #316]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 800396a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1ef      	bne.n	8003956 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80a6 	beq.w	8003ad0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003984:	2300      	movs	r3, #0
 8003986:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003988:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10d      	bne.n	80039b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003994:	4b44      	ldr	r3, [pc, #272]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003998:	4a43      	ldr	r2, [pc, #268]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 800399a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399e:	6593      	str	r3, [r2, #88]	; 0x58
 80039a0:	4b41      	ldr	r3, [pc, #260]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 80039a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ac:	2301      	movs	r3, #1
 80039ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b0:	4b3e      	ldr	r3, [pc, #248]	; (8003aac <HAL_RCC_OscConfig+0x57c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d118      	bne.n	80039ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039bc:	4b3b      	ldr	r3, [pc, #236]	; (8003aac <HAL_RCC_OscConfig+0x57c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a3a      	ldr	r2, [pc, #232]	; (8003aac <HAL_RCC_OscConfig+0x57c>)
 80039c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c8:	f7fd fe80 	bl	80016cc <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d0:	f7fd fe7c 	bl	80016cc <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e184      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e2:	4b32      	ldr	r3, [pc, #200]	; (8003aac <HAL_RCC_OscConfig+0x57c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d108      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4d8>
 80039f6:	4b2c      	ldr	r3, [pc, #176]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 80039f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fc:	4a2a      	ldr	r2, [pc, #168]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a06:	e024      	b.n	8003a52 <HAL_RCC_OscConfig+0x522>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d110      	bne.n	8003a32 <HAL_RCC_OscConfig+0x502>
 8003a10:	4b25      	ldr	r3, [pc, #148]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a16:	4a24      	ldr	r2, [pc, #144]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003a18:	f043 0304 	orr.w	r3, r3, #4
 8003a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a20:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a26:	4a20      	ldr	r2, [pc, #128]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a30:	e00f      	b.n	8003a52 <HAL_RCC_OscConfig+0x522>
 8003a32:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a38:	4a1b      	ldr	r2, [pc, #108]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003a3a:	f023 0301 	bic.w	r3, r3, #1
 8003a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a42:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a48:	4a17      	ldr	r2, [pc, #92]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003a4a:	f023 0304 	bic.w	r3, r3, #4
 8003a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d016      	beq.n	8003a88 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5a:	f7fd fe37 	bl	80016cc <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fd fe33 	bl	80016cc <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e139      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCC_OscConfig+0x578>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0ed      	beq.n	8003a62 <HAL_RCC_OscConfig+0x532>
 8003a86:	e01a      	b.n	8003abe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a88:	f7fd fe20 	bl	80016cc <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a8e:	e00f      	b.n	8003ab0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a90:	f7fd fe1c 	bl	80016cc <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d906      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e122      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ab0:	4b90      	ldr	r3, [pc, #576]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e8      	bne.n	8003a90 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003abe:	7ffb      	ldrb	r3, [r7, #31]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac4:	4b8b      	ldr	r3, [pc, #556]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	4a8a      	ldr	r2, [pc, #552]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ace:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8108 	beq.w	8003cea <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	f040 80d0 	bne.w	8003c84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ae4:	4b83      	ldr	r3, [pc, #524]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f003 0203 	and.w	r2, r3, #3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d130      	bne.n	8003b5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	3b01      	subs	r3, #1
 8003b04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d127      	bne.n	8003b5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d11f      	bne.n	8003b5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b24:	2a07      	cmp	r2, #7
 8003b26:	bf14      	ite	ne
 8003b28:	2201      	movne	r2, #1
 8003b2a:	2200      	moveq	r2, #0
 8003b2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d113      	bne.n	8003b5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3c:	085b      	lsrs	r3, r3, #1
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d109      	bne.n	8003b5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	085b      	lsrs	r3, r3, #1
 8003b52:	3b01      	subs	r3, #1
 8003b54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d06e      	beq.n	8003c38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b0c      	cmp	r3, #12
 8003b5e:	d069      	beq.n	8003c34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b60:	4b64      	ldr	r3, [pc, #400]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d105      	bne.n	8003b78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b6c:	4b61      	ldr	r3, [pc, #388]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0b7      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b7c:	4b5d      	ldr	r3, [pc, #372]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a5c      	ldr	r2, [pc, #368]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b88:	f7fd fda0 	bl	80016cc <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b90:	f7fd fd9c 	bl	80016cc <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e0a4      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ba2:	4b54      	ldr	r3, [pc, #336]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bae:	4b51      	ldr	r3, [pc, #324]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	4b51      	ldr	r3, [pc, #324]	; (8003cf8 <HAL_RCC_OscConfig+0x7c8>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bbe:	3a01      	subs	r2, #1
 8003bc0:	0112      	lsls	r2, r2, #4
 8003bc2:	4311      	orrs	r1, r2
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bc8:	0212      	lsls	r2, r2, #8
 8003bca:	4311      	orrs	r1, r2
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bd0:	0852      	lsrs	r2, r2, #1
 8003bd2:	3a01      	subs	r2, #1
 8003bd4:	0552      	lsls	r2, r2, #21
 8003bd6:	4311      	orrs	r1, r2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bdc:	0852      	lsrs	r2, r2, #1
 8003bde:	3a01      	subs	r2, #1
 8003be0:	0652      	lsls	r2, r2, #25
 8003be2:	4311      	orrs	r1, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003be8:	0912      	lsrs	r2, r2, #4
 8003bea:	0452      	lsls	r2, r2, #17
 8003bec:	430a      	orrs	r2, r1
 8003bee:	4941      	ldr	r1, [pc, #260]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bf4:	4b3f      	ldr	r3, [pc, #252]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a3e      	ldr	r2, [pc, #248]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bfe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c00:	4b3c      	ldr	r3, [pc, #240]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4a3b      	ldr	r2, [pc, #236]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c0c:	f7fd fd5e 	bl	80016cc <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c14:	f7fd fd5a 	bl	80016cc <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e062      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c26:	4b33      	ldr	r3, [pc, #204]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c32:	e05a      	b.n	8003cea <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e059      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c38:	4b2e      	ldr	r3, [pc, #184]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d152      	bne.n	8003cea <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c44:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2a      	ldr	r2, [pc, #168]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c50:	4b28      	ldr	r3, [pc, #160]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4a27      	ldr	r2, [pc, #156]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c5c:	f7fd fd36 	bl	80016cc <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c64:	f7fd fd32 	bl	80016cc <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e03a      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c76:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x734>
 8003c82:	e032      	b.n	8003cea <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2b0c      	cmp	r3, #12
 8003c88:	d02d      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a19      	ldr	r2, [pc, #100]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003c90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c94:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003c96:	4b17      	ldr	r3, [pc, #92]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d105      	bne.n	8003cae <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ca2:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	4a13      	ldr	r2, [pc, #76]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003ca8:	f023 0303 	bic.w	r3, r3, #3
 8003cac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	4a10      	ldr	r2, [pc, #64]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003cb4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cbc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbe:	f7fd fd05 	bl	80016cc <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc6:	f7fd fd01 	bl	80016cc <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e009      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <HAL_RCC_OscConfig+0x7c4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x796>
 8003ce4:	e001      	b.n	8003cea <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3720      	adds	r7, #32
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	f99d808c 	.word	0xf99d808c

08003cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0c8      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d10:	4b66      	ldr	r3, [pc, #408]	; (8003eac <HAL_RCC_ClockConfig+0x1b0>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d910      	bls.n	8003d40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	4b63      	ldr	r3, [pc, #396]	; (8003eac <HAL_RCC_ClockConfig+0x1b0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f023 0207 	bic.w	r2, r3, #7
 8003d26:	4961      	ldr	r1, [pc, #388]	; (8003eac <HAL_RCC_ClockConfig+0x1b0>)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2e:	4b5f      	ldr	r3, [pc, #380]	; (8003eac <HAL_RCC_ClockConfig+0x1b0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0b0      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d04c      	beq.n	8003de6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d54:	4b56      	ldr	r3, [pc, #344]	; (8003eb0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d121      	bne.n	8003da4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e09e      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d107      	bne.n	8003d7c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d6c:	4b50      	ldr	r3, [pc, #320]	; (8003eb0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d115      	bne.n	8003da4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e092      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d107      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d84:	4b4a      	ldr	r3, [pc, #296]	; (8003eb0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d109      	bne.n	8003da4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e086      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d94:	4b46      	ldr	r3, [pc, #280]	; (8003eb0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e07e      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003da4:	4b42      	ldr	r3, [pc, #264]	; (8003eb0 <HAL_RCC_ClockConfig+0x1b4>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f023 0203 	bic.w	r2, r3, #3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	493f      	ldr	r1, [pc, #252]	; (8003eb0 <HAL_RCC_ClockConfig+0x1b4>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db6:	f7fd fc89 	bl	80016cc <HAL_GetTick>
 8003dba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbc:	e00a      	b.n	8003dd4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dbe:	f7fd fc85 	bl	80016cc <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e066      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd4:	4b36      	ldr	r3, [pc, #216]	; (8003eb0 <HAL_RCC_ClockConfig+0x1b4>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 020c 	and.w	r2, r3, #12
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d1eb      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df2:	4b2f      	ldr	r3, [pc, #188]	; (8003eb0 <HAL_RCC_ClockConfig+0x1b4>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	492c      	ldr	r1, [pc, #176]	; (8003eb0 <HAL_RCC_ClockConfig+0x1b4>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e04:	4b29      	ldr	r3, [pc, #164]	; (8003eac <HAL_RCC_ClockConfig+0x1b0>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d210      	bcs.n	8003e34 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e12:	4b26      	ldr	r3, [pc, #152]	; (8003eac <HAL_RCC_ClockConfig+0x1b0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f023 0207 	bic.w	r2, r3, #7
 8003e1a:	4924      	ldr	r1, [pc, #144]	; (8003eac <HAL_RCC_ClockConfig+0x1b0>)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e22:	4b22      	ldr	r3, [pc, #136]	; (8003eac <HAL_RCC_ClockConfig+0x1b0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e036      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e40:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <HAL_RCC_ClockConfig+0x1b4>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4918      	ldr	r1, [pc, #96]	; (8003eb0 <HAL_RCC_ClockConfig+0x1b4>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e5e:	4b14      	ldr	r3, [pc, #80]	; (8003eb0 <HAL_RCC_ClockConfig+0x1b4>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4910      	ldr	r1, [pc, #64]	; (8003eb0 <HAL_RCC_ClockConfig+0x1b4>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e72:	f000 f825 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 8003e76:	4602      	mov	r2, r0
 8003e78:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <HAL_RCC_ClockConfig+0x1b4>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	490c      	ldr	r1, [pc, #48]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	5ccb      	ldrb	r3, [r1, r3]
 8003e86:	f003 031f 	and.w	r3, r3, #31
 8003e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8e:	4a0a      	ldr	r2, [pc, #40]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e92:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <HAL_RCC_ClockConfig+0x1c0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd fbc8 	bl	800162c <HAL_InitTick>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ea0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40022000 	.word	0x40022000
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	08005528 	.word	0x08005528
 8003eb8:	20000000 	.word	0x20000000
 8003ebc:	20000004 	.word	0x20000004

08003ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b089      	sub	sp, #36	; 0x24
 8003ec4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ece:	4b3e      	ldr	r3, [pc, #248]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ed8:	4b3b      	ldr	r3, [pc, #236]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0303 	and.w	r3, r3, #3
 8003ee0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b0c      	cmp	r3, #12
 8003eec:	d121      	bne.n	8003f32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d11e      	bne.n	8003f32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ef4:	4b34      	ldr	r3, [pc, #208]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d107      	bne.n	8003f10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f00:	4b31      	ldr	r3, [pc, #196]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f06:	0a1b      	lsrs	r3, r3, #8
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	e005      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f10:	4b2d      	ldr	r3, [pc, #180]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f1c:	4a2b      	ldr	r2, [pc, #172]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10d      	bne.n	8003f48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f30:	e00a      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d102      	bne.n	8003f3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f38:	4b25      	ldr	r3, [pc, #148]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	e004      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f44:	4b23      	ldr	r3, [pc, #140]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b0c      	cmp	r3, #12
 8003f4c:	d134      	bne.n	8003fb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f4e:	4b1e      	ldr	r3, [pc, #120]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d003      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0xac>
 8003f64:	e005      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f66:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f68:	617b      	str	r3, [r7, #20]
      break;
 8003f6a:	e005      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f6c:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f6e:	617b      	str	r3, [r7, #20]
      break;
 8003f70:	e002      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	617b      	str	r3, [r7, #20]
      break;
 8003f76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f78:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	091b      	lsrs	r3, r3, #4
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	3301      	adds	r3, #1
 8003f84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f86:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	0a1b      	lsrs	r3, r3, #8
 8003f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	fb02 f203 	mul.w	r2, r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	0e5b      	lsrs	r3, r3, #25
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	3301      	adds	r3, #1
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fb8:	69bb      	ldr	r3, [r7, #24]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3724      	adds	r7, #36	; 0x24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	08005540 	.word	0x08005540
 8003fd0:	00f42400 	.word	0x00f42400
 8003fd4:	007a1200 	.word	0x007a1200

08003fd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fdc:	4b03      	ldr	r3, [pc, #12]	; (8003fec <HAL_RCC_GetHCLKFreq+0x14>)
 8003fde:	681b      	ldr	r3, [r3, #0]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000000 	.word	0x20000000

08003ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ff4:	f7ff fff0 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	0a1b      	lsrs	r3, r3, #8
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4904      	ldr	r1, [pc, #16]	; (8004018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40021000 	.word	0x40021000
 8004018:	08005538 	.word	0x08005538

0800401c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004020:	f7ff ffda 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8004024:	4602      	mov	r2, r0
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	0adb      	lsrs	r3, r3, #11
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	4904      	ldr	r1, [pc, #16]	; (8004044 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004032:	5ccb      	ldrb	r3, [r1, r3]
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800403c:	4618      	mov	r0, r3
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40021000 	.word	0x40021000
 8004044:	08005538 	.word	0x08005538

08004048 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004054:	4b2a      	ldr	r3, [pc, #168]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004060:	f7fe fd22 	bl	8002aa8 <HAL_PWREx_GetVoltageRange>
 8004064:	6178      	str	r0, [r7, #20]
 8004066:	e014      	b.n	8004092 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004068:	4b25      	ldr	r3, [pc, #148]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	4a24      	ldr	r2, [pc, #144]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800406e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004072:	6593      	str	r3, [r2, #88]	; 0x58
 8004074:	4b22      	ldr	r3, [pc, #136]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004080:	f7fe fd12 	bl	8002aa8 <HAL_PWREx_GetVoltageRange>
 8004084:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004086:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800408c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004090:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004098:	d10b      	bne.n	80040b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b80      	cmp	r3, #128	; 0x80
 800409e:	d919      	bls.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2ba0      	cmp	r3, #160	; 0xa0
 80040a4:	d902      	bls.n	80040ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040a6:	2302      	movs	r3, #2
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	e013      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040ac:	2301      	movs	r3, #1
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	e010      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b80      	cmp	r3, #128	; 0x80
 80040b6:	d902      	bls.n	80040be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040b8:	2303      	movs	r3, #3
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	e00a      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b80      	cmp	r3, #128	; 0x80
 80040c2:	d102      	bne.n	80040ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040c4:	2302      	movs	r3, #2
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	e004      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b70      	cmp	r3, #112	; 0x70
 80040ce:	d101      	bne.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040d0:	2301      	movs	r3, #1
 80040d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f023 0207 	bic.w	r2, r3, #7
 80040dc:	4909      	ldr	r1, [pc, #36]	; (8004104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040e4:	4b07      	ldr	r3, [pc, #28]	; (8004104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d001      	beq.n	80040f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000
 8004104:	40022000 	.word	0x40022000

08004108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004110:	2300      	movs	r3, #0
 8004112:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004114:	2300      	movs	r3, #0
 8004116:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004120:	2b00      	cmp	r3, #0
 8004122:	d041      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004128:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800412c:	d02a      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800412e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004132:	d824      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004134:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004138:	d008      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800413a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800413e:	d81e      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004144:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004148:	d010      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800414a:	e018      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800414c:	4b86      	ldr	r3, [pc, #536]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4a85      	ldr	r2, [pc, #532]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004156:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004158:	e015      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	2100      	movs	r1, #0
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fabb 	bl	80046dc <RCCEx_PLLSAI1_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800416a:	e00c      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3320      	adds	r3, #32
 8004170:	2100      	movs	r1, #0
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fba6 	bl	80048c4 <RCCEx_PLLSAI2_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800417c:	e003      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	74fb      	strb	r3, [r7, #19]
      break;
 8004182:	e000      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004186:	7cfb      	ldrb	r3, [r7, #19]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800418c:	4b76      	ldr	r3, [pc, #472]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004192:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800419a:	4973      	ldr	r1, [pc, #460]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041a2:	e001      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a4:	7cfb      	ldrb	r3, [r7, #19]
 80041a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d041      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041bc:	d02a      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80041be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041c2:	d824      	bhi.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041c8:	d008      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041ce:	d81e      	bhi.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80041d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041d8:	d010      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041da:	e018      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041dc:	4b62      	ldr	r3, [pc, #392]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4a61      	ldr	r2, [pc, #388]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041e8:	e015      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3304      	adds	r3, #4
 80041ee:	2100      	movs	r1, #0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fa73 	bl	80046dc <RCCEx_PLLSAI1_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041fa:	e00c      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3320      	adds	r3, #32
 8004200:	2100      	movs	r1, #0
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fb5e 	bl	80048c4 <RCCEx_PLLSAI2_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800420c:	e003      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	74fb      	strb	r3, [r7, #19]
      break;
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004216:	7cfb      	ldrb	r3, [r7, #19]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800421c:	4b52      	ldr	r3, [pc, #328]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800422a:	494f      	ldr	r1, [pc, #316]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004232:	e001      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	7cfb      	ldrb	r3, [r7, #19]
 8004236:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80a0 	beq.w	8004386 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004246:	2300      	movs	r3, #0
 8004248:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800424a:	4b47      	ldr	r3, [pc, #284]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800425a:	2300      	movs	r3, #0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00d      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004260:	4b41      	ldr	r3, [pc, #260]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	4a40      	ldr	r2, [pc, #256]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426a:	6593      	str	r3, [r2, #88]	; 0x58
 800426c:	4b3e      	ldr	r3, [pc, #248]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004278:	2301      	movs	r3, #1
 800427a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800427c:	4b3b      	ldr	r3, [pc, #236]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a3a      	ldr	r2, [pc, #232]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004286:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004288:	f7fd fa20 	bl	80016cc <HAL_GetTick>
 800428c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800428e:	e009      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004290:	f7fd fa1c 	bl	80016cc <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d902      	bls.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	74fb      	strb	r3, [r7, #19]
        break;
 80042a2:	e005      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042a4:	4b31      	ldr	r3, [pc, #196]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0ef      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80042b0:	7cfb      	ldrb	r3, [r7, #19]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d15c      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042b6:	4b2c      	ldr	r3, [pc, #176]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01f      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d019      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042d4:	4b24      	ldr	r3, [pc, #144]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042e0:	4b21      	ldr	r3, [pc, #132]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	4a20      	ldr	r2, [pc, #128]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042f0:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f6:	4a1c      	ldr	r2, [pc, #112]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004300:	4a19      	ldr	r2, [pc, #100]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d016      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004312:	f7fd f9db 	bl	80016cc <HAL_GetTick>
 8004316:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004318:	e00b      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431a:	f7fd f9d7 	bl	80016cc <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f241 3288 	movw	r2, #5000	; 0x1388
 8004328:	4293      	cmp	r3, r2
 800432a:	d902      	bls.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	74fb      	strb	r3, [r7, #19]
            break;
 8004330:	e006      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004332:	4b0d      	ldr	r3, [pc, #52]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0ec      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10c      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004346:	4b08      	ldr	r3, [pc, #32]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004356:	4904      	ldr	r1, [pc, #16]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800435e:	e009      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	74bb      	strb	r3, [r7, #18]
 8004364:	e006      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004366:	bf00      	nop
 8004368:	40021000 	.word	0x40021000
 800436c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004370:	7cfb      	ldrb	r3, [r7, #19]
 8004372:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004374:	7c7b      	ldrb	r3, [r7, #17]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d105      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800437a:	4b9e      	ldr	r3, [pc, #632]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	4a9d      	ldr	r2, [pc, #628]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004384:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004392:	4b98      	ldr	r3, [pc, #608]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004398:	f023 0203 	bic.w	r2, r3, #3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	4994      	ldr	r1, [pc, #592]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043b4:	4b8f      	ldr	r3, [pc, #572]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	f023 020c 	bic.w	r2, r3, #12
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	498c      	ldr	r1, [pc, #560]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043d6:	4b87      	ldr	r3, [pc, #540]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	4983      	ldr	r1, [pc, #524]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043f8:	4b7e      	ldr	r3, [pc, #504]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	497b      	ldr	r1, [pc, #492]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800441a:	4b76      	ldr	r3, [pc, #472]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004420:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004428:	4972      	ldr	r1, [pc, #456]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800443c:	4b6d      	ldr	r3, [pc, #436]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004442:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444a:	496a      	ldr	r1, [pc, #424]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800445e:	4b65      	ldr	r3, [pc, #404]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004464:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446c:	4961      	ldr	r1, [pc, #388]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004480:	4b5c      	ldr	r3, [pc, #368]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004486:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448e:	4959      	ldr	r1, [pc, #356]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044a2:	4b54      	ldr	r3, [pc, #336]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b0:	4950      	ldr	r1, [pc, #320]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044c4:	4b4b      	ldr	r3, [pc, #300]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	4948      	ldr	r1, [pc, #288]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044e6:	4b43      	ldr	r3, [pc, #268]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f4:	493f      	ldr	r1, [pc, #252]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d028      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004508:	4b3a      	ldr	r3, [pc, #232]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004516:	4937      	ldr	r1, [pc, #220]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004522:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004526:	d106      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004528:	4b32      	ldr	r3, [pc, #200]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4a31      	ldr	r2, [pc, #196]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004532:	60d3      	str	r3, [r2, #12]
 8004534:	e011      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800453a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800453e:	d10c      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	2101      	movs	r1, #1
 8004546:	4618      	mov	r0, r3
 8004548:	f000 f8c8 	bl	80046dc <RCCEx_PLLSAI1_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004550:	7cfb      	ldrb	r3, [r7, #19]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004556:	7cfb      	ldrb	r3, [r7, #19]
 8004558:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d028      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004566:	4b23      	ldr	r3, [pc, #140]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	491f      	ldr	r1, [pc, #124]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004584:	d106      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004586:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	4a1a      	ldr	r2, [pc, #104]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004590:	60d3      	str	r3, [r2, #12]
 8004592:	e011      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004598:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800459c:	d10c      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3304      	adds	r3, #4
 80045a2:	2101      	movs	r1, #1
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 f899 	bl	80046dc <RCCEx_PLLSAI1_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ae:	7cfb      	ldrb	r3, [r7, #19]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80045b4:	7cfb      	ldrb	r3, [r7, #19]
 80045b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d02b      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d2:	4908      	ldr	r1, [pc, #32]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045e2:	d109      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045e4:	4b03      	ldr	r3, [pc, #12]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4a02      	ldr	r2, [pc, #8]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ee:	60d3      	str	r3, [r2, #12]
 80045f0:	e014      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80045f2:	bf00      	nop
 80045f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004600:	d10c      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3304      	adds	r3, #4
 8004606:	2101      	movs	r1, #1
 8004608:	4618      	mov	r0, r3
 800460a:	f000 f867 	bl	80046dc <RCCEx_PLLSAI1_Config>
 800460e:	4603      	mov	r3, r0
 8004610:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004612:	7cfb      	ldrb	r3, [r7, #19]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004618:	7cfb      	ldrb	r3, [r7, #19]
 800461a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d02f      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004628:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004636:	4928      	ldr	r1, [pc, #160]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004642:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004646:	d10d      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3304      	adds	r3, #4
 800464c:	2102      	movs	r1, #2
 800464e:	4618      	mov	r0, r3
 8004650:	f000 f844 	bl	80046dc <RCCEx_PLLSAI1_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d014      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800465e:	7cfb      	ldrb	r3, [r7, #19]
 8004660:	74bb      	strb	r3, [r7, #18]
 8004662:	e011      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800466c:	d10c      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3320      	adds	r3, #32
 8004672:	2102      	movs	r1, #2
 8004674:	4618      	mov	r0, r3
 8004676:	f000 f925 	bl	80048c4 <RCCEx_PLLSAI2_Config>
 800467a:	4603      	mov	r3, r0
 800467c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800467e:	7cfb      	ldrb	r3, [r7, #19]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004684:	7cfb      	ldrb	r3, [r7, #19]
 8004686:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004694:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a2:	490d      	ldr	r1, [pc, #52]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00b      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046b6:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c6:	4904      	ldr	r1, [pc, #16]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40021000 	.word	0x40021000

080046dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046ea:	4b75      	ldr	r3, [pc, #468]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d018      	beq.n	8004728 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046f6:	4b72      	ldr	r3, [pc, #456]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f003 0203 	and.w	r2, r3, #3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d10d      	bne.n	8004722 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
       ||
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800470e:	4b6c      	ldr	r3, [pc, #432]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
       ||
 800471e:	429a      	cmp	r2, r3
 8004720:	d047      	beq.n	80047b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	73fb      	strb	r3, [r7, #15]
 8004726:	e044      	b.n	80047b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d018      	beq.n	8004762 <RCCEx_PLLSAI1_Config+0x86>
 8004730:	2b03      	cmp	r3, #3
 8004732:	d825      	bhi.n	8004780 <RCCEx_PLLSAI1_Config+0xa4>
 8004734:	2b01      	cmp	r3, #1
 8004736:	d002      	beq.n	800473e <RCCEx_PLLSAI1_Config+0x62>
 8004738:	2b02      	cmp	r3, #2
 800473a:	d009      	beq.n	8004750 <RCCEx_PLLSAI1_Config+0x74>
 800473c:	e020      	b.n	8004780 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800473e:	4b60      	ldr	r3, [pc, #384]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d11d      	bne.n	8004786 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474e:	e01a      	b.n	8004786 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004750:	4b5b      	ldr	r3, [pc, #364]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004758:	2b00      	cmp	r3, #0
 800475a:	d116      	bne.n	800478a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004760:	e013      	b.n	800478a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004762:	4b57      	ldr	r3, [pc, #348]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10f      	bne.n	800478e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800476e:	4b54      	ldr	r3, [pc, #336]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800477e:	e006      	b.n	800478e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
      break;
 8004784:	e004      	b.n	8004790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004786:	bf00      	nop
 8004788:	e002      	b.n	8004790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800478a:	bf00      	nop
 800478c:	e000      	b.n	8004790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800478e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10d      	bne.n	80047b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004796:	4b4a      	ldr	r3, [pc, #296]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6819      	ldr	r1, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	430b      	orrs	r3, r1
 80047ac:	4944      	ldr	r1, [pc, #272]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d17d      	bne.n	80048b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047b8:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a40      	ldr	r2, [pc, #256]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c4:	f7fc ff82 	bl	80016cc <HAL_GetTick>
 80047c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047ca:	e009      	b.n	80047e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047cc:	f7fc ff7e 	bl	80016cc <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d902      	bls.n	80047e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	73fb      	strb	r3, [r7, #15]
        break;
 80047de:	e005      	b.n	80047ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047e0:	4b37      	ldr	r3, [pc, #220]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1ef      	bne.n	80047cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d160      	bne.n	80048b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d111      	bne.n	800481c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047f8:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6892      	ldr	r2, [r2, #8]
 8004808:	0211      	lsls	r1, r2, #8
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68d2      	ldr	r2, [r2, #12]
 800480e:	0912      	lsrs	r2, r2, #4
 8004810:	0452      	lsls	r2, r2, #17
 8004812:	430a      	orrs	r2, r1
 8004814:	492a      	ldr	r1, [pc, #168]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004816:	4313      	orrs	r3, r2
 8004818:	610b      	str	r3, [r1, #16]
 800481a:	e027      	b.n	800486c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d112      	bne.n	8004848 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004822:	4b27      	ldr	r3, [pc, #156]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800482a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6892      	ldr	r2, [r2, #8]
 8004832:	0211      	lsls	r1, r2, #8
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6912      	ldr	r2, [r2, #16]
 8004838:	0852      	lsrs	r2, r2, #1
 800483a:	3a01      	subs	r2, #1
 800483c:	0552      	lsls	r2, r2, #21
 800483e:	430a      	orrs	r2, r1
 8004840:	491f      	ldr	r1, [pc, #124]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004842:	4313      	orrs	r3, r2
 8004844:	610b      	str	r3, [r1, #16]
 8004846:	e011      	b.n	800486c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004848:	4b1d      	ldr	r3, [pc, #116]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004850:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6892      	ldr	r2, [r2, #8]
 8004858:	0211      	lsls	r1, r2, #8
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6952      	ldr	r2, [r2, #20]
 800485e:	0852      	lsrs	r2, r2, #1
 8004860:	3a01      	subs	r2, #1
 8004862:	0652      	lsls	r2, r2, #25
 8004864:	430a      	orrs	r2, r1
 8004866:	4916      	ldr	r1, [pc, #88]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004868:	4313      	orrs	r3, r2
 800486a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800486c:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a13      	ldr	r2, [pc, #76]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004872:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004876:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7fc ff28 	bl	80016cc <HAL_GetTick>
 800487c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800487e:	e009      	b.n	8004894 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004880:	f7fc ff24 	bl	80016cc <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d902      	bls.n	8004894 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	73fb      	strb	r3, [r7, #15]
          break;
 8004892:	e005      	b.n	80048a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004894:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ef      	beq.n	8004880 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	4904      	ldr	r1, [pc, #16]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40021000 	.word	0x40021000

080048c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048d2:	4b6a      	ldr	r3, [pc, #424]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d018      	beq.n	8004910 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048de:	4b67      	ldr	r3, [pc, #412]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0203 	and.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d10d      	bne.n	800490a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
       ||
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d009      	beq.n	800490a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80048f6:	4b61      	ldr	r3, [pc, #388]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	091b      	lsrs	r3, r3, #4
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
       ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d047      	beq.n	800499a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	73fb      	strb	r3, [r7, #15]
 800490e:	e044      	b.n	800499a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b03      	cmp	r3, #3
 8004916:	d018      	beq.n	800494a <RCCEx_PLLSAI2_Config+0x86>
 8004918:	2b03      	cmp	r3, #3
 800491a:	d825      	bhi.n	8004968 <RCCEx_PLLSAI2_Config+0xa4>
 800491c:	2b01      	cmp	r3, #1
 800491e:	d002      	beq.n	8004926 <RCCEx_PLLSAI2_Config+0x62>
 8004920:	2b02      	cmp	r3, #2
 8004922:	d009      	beq.n	8004938 <RCCEx_PLLSAI2_Config+0x74>
 8004924:	e020      	b.n	8004968 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004926:	4b55      	ldr	r3, [pc, #340]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d11d      	bne.n	800496e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004936:	e01a      	b.n	800496e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004938:	4b50      	ldr	r3, [pc, #320]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004940:	2b00      	cmp	r3, #0
 8004942:	d116      	bne.n	8004972 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004948:	e013      	b.n	8004972 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800494a:	4b4c      	ldr	r3, [pc, #304]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10f      	bne.n	8004976 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004956:	4b49      	ldr	r3, [pc, #292]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004966:	e006      	b.n	8004976 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
      break;
 800496c:	e004      	b.n	8004978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800496e:	bf00      	nop
 8004970:	e002      	b.n	8004978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004972:	bf00      	nop
 8004974:	e000      	b.n	8004978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004976:	bf00      	nop
    }

    if(status == HAL_OK)
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10d      	bne.n	800499a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800497e:	4b3f      	ldr	r3, [pc, #252]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6819      	ldr	r1, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	3b01      	subs	r3, #1
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	430b      	orrs	r3, r1
 8004994:	4939      	ldr	r1, [pc, #228]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004996:	4313      	orrs	r3, r2
 8004998:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d167      	bne.n	8004a70 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049a0:	4b36      	ldr	r3, [pc, #216]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a35      	ldr	r2, [pc, #212]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ac:	f7fc fe8e 	bl	80016cc <HAL_GetTick>
 80049b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049b2:	e009      	b.n	80049c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049b4:	f7fc fe8a 	bl	80016cc <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d902      	bls.n	80049c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	73fb      	strb	r3, [r7, #15]
        break;
 80049c6:	e005      	b.n	80049d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049c8:	4b2c      	ldr	r3, [pc, #176]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ef      	bne.n	80049b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d14a      	bne.n	8004a70 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d111      	bne.n	8004a04 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049e0:	4b26      	ldr	r3, [pc, #152]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6892      	ldr	r2, [r2, #8]
 80049f0:	0211      	lsls	r1, r2, #8
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	68d2      	ldr	r2, [r2, #12]
 80049f6:	0912      	lsrs	r2, r2, #4
 80049f8:	0452      	lsls	r2, r2, #17
 80049fa:	430a      	orrs	r2, r1
 80049fc:	491f      	ldr	r1, [pc, #124]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	614b      	str	r3, [r1, #20]
 8004a02:	e011      	b.n	8004a28 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a04:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6892      	ldr	r2, [r2, #8]
 8004a14:	0211      	lsls	r1, r2, #8
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6912      	ldr	r2, [r2, #16]
 8004a1a:	0852      	lsrs	r2, r2, #1
 8004a1c:	3a01      	subs	r2, #1
 8004a1e:	0652      	lsls	r2, r2, #25
 8004a20:	430a      	orrs	r2, r1
 8004a22:	4916      	ldr	r1, [pc, #88]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a28:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a13      	ldr	r2, [pc, #76]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fc fe4a 	bl	80016cc <HAL_GetTick>
 8004a38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a3a:	e009      	b.n	8004a50 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a3c:	f7fc fe46 	bl	80016cc <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d902      	bls.n	8004a50 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a4e:	e005      	b.n	8004a5c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a50:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ef      	beq.n	8004a3c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a62:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a64:	695a      	ldr	r2, [r3, #20]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	4904      	ldr	r1, [pc, #16]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40021000 	.word	0x40021000

08004a80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e040      	b.n	8004b14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fc fce8 	bl	8001478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2224      	movs	r2, #36	; 0x24
 8004aac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0201 	bic.w	r2, r2, #1
 8004abc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f8c0 	bl	8004c44 <UART_SetConfig>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e022      	b.n	8004b14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fb3e 	bl	8005158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0201 	orr.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fbc5 	bl	800529c <UART_CheckIdleState>
 8004b12:	4603      	mov	r3, r0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	f040 8082 	bne.w	8004c3a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_UART_Transmit+0x26>
 8004b3c:	88fb      	ldrh	r3, [r7, #6]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e07a      	b.n	8004c3c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_UART_Transmit+0x38>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e073      	b.n	8004c3c <HAL_UART_Transmit+0x120>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2221      	movs	r2, #33	; 0x21
 8004b68:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b6a:	f7fc fdaf 	bl	80016cc <HAL_GetTick>
 8004b6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	88fa      	ldrh	r2, [r7, #6]
 8004b74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	88fa      	ldrh	r2, [r7, #6]
 8004b7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b88:	d108      	bne.n	8004b9c <HAL_UART_Transmit+0x80>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d104      	bne.n	8004b9c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	e003      	b.n	8004ba4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004bac:	e02d      	b.n	8004c0a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2180      	movs	r1, #128	; 0x80
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 fbb8 	bl	800532e <UART_WaitOnFlagUntilTimeout>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e039      	b.n	8004c3c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10b      	bne.n	8004be6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	881a      	ldrh	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bda:	b292      	uxth	r2, r2
 8004bdc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	3302      	adds	r3, #2
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	e008      	b.n	8004bf8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	781a      	ldrb	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	b292      	uxth	r2, r2
 8004bf0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1cb      	bne.n	8004bae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2140      	movs	r1, #64	; 0x40
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 fb84 	bl	800532e <UART_WaitOnFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e005      	b.n	8004c3c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e000      	b.n	8004c3c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
  }
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3720      	adds	r7, #32
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c44:	b5b0      	push	{r4, r5, r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	4bad      	ldr	r3, [pc, #692]	; (8004f24 <UART_SetConfig+0x2e0>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	69f9      	ldr	r1, [r7, #28]
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4aa2      	ldr	r2, [pc, #648]	; (8004f28 <UART_SetConfig+0x2e4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	69fa      	ldr	r2, [r7, #28]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a99      	ldr	r2, [pc, #612]	; (8004f2c <UART_SetConfig+0x2e8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d121      	bne.n	8004d0e <UART_SetConfig+0xca>
 8004cca:	4b99      	ldr	r3, [pc, #612]	; (8004f30 <UART_SetConfig+0x2ec>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d817      	bhi.n	8004d08 <UART_SetConfig+0xc4>
 8004cd8:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <UART_SetConfig+0x9c>)
 8004cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cde:	bf00      	nop
 8004ce0:	08004cf1 	.word	0x08004cf1
 8004ce4:	08004cfd 	.word	0x08004cfd
 8004ce8:	08004cf7 	.word	0x08004cf7
 8004cec:	08004d03 	.word	0x08004d03
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	76fb      	strb	r3, [r7, #27]
 8004cf4:	e0e7      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	76fb      	strb	r3, [r7, #27]
 8004cfa:	e0e4      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	76fb      	strb	r3, [r7, #27]
 8004d00:	e0e1      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004d02:	2308      	movs	r3, #8
 8004d04:	76fb      	strb	r3, [r7, #27]
 8004d06:	e0de      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004d08:	2310      	movs	r3, #16
 8004d0a:	76fb      	strb	r3, [r7, #27]
 8004d0c:	e0db      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a88      	ldr	r2, [pc, #544]	; (8004f34 <UART_SetConfig+0x2f0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d132      	bne.n	8004d7e <UART_SetConfig+0x13a>
 8004d18:	4b85      	ldr	r3, [pc, #532]	; (8004f30 <UART_SetConfig+0x2ec>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	f003 030c 	and.w	r3, r3, #12
 8004d22:	2b0c      	cmp	r3, #12
 8004d24:	d828      	bhi.n	8004d78 <UART_SetConfig+0x134>
 8004d26:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <UART_SetConfig+0xe8>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004d61 	.word	0x08004d61
 8004d30:	08004d79 	.word	0x08004d79
 8004d34:	08004d79 	.word	0x08004d79
 8004d38:	08004d79 	.word	0x08004d79
 8004d3c:	08004d6d 	.word	0x08004d6d
 8004d40:	08004d79 	.word	0x08004d79
 8004d44:	08004d79 	.word	0x08004d79
 8004d48:	08004d79 	.word	0x08004d79
 8004d4c:	08004d67 	.word	0x08004d67
 8004d50:	08004d79 	.word	0x08004d79
 8004d54:	08004d79 	.word	0x08004d79
 8004d58:	08004d79 	.word	0x08004d79
 8004d5c:	08004d73 	.word	0x08004d73
 8004d60:	2300      	movs	r3, #0
 8004d62:	76fb      	strb	r3, [r7, #27]
 8004d64:	e0af      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004d66:	2302      	movs	r3, #2
 8004d68:	76fb      	strb	r3, [r7, #27]
 8004d6a:	e0ac      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	76fb      	strb	r3, [r7, #27]
 8004d70:	e0a9      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004d72:	2308      	movs	r3, #8
 8004d74:	76fb      	strb	r3, [r7, #27]
 8004d76:	e0a6      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	76fb      	strb	r3, [r7, #27]
 8004d7c:	e0a3      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a6d      	ldr	r2, [pc, #436]	; (8004f38 <UART_SetConfig+0x2f4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d120      	bne.n	8004dca <UART_SetConfig+0x186>
 8004d88:	4b69      	ldr	r3, [pc, #420]	; (8004f30 <UART_SetConfig+0x2ec>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d92:	2b30      	cmp	r3, #48	; 0x30
 8004d94:	d013      	beq.n	8004dbe <UART_SetConfig+0x17a>
 8004d96:	2b30      	cmp	r3, #48	; 0x30
 8004d98:	d814      	bhi.n	8004dc4 <UART_SetConfig+0x180>
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d009      	beq.n	8004db2 <UART_SetConfig+0x16e>
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d810      	bhi.n	8004dc4 <UART_SetConfig+0x180>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <UART_SetConfig+0x168>
 8004da6:	2b10      	cmp	r3, #16
 8004da8:	d006      	beq.n	8004db8 <UART_SetConfig+0x174>
 8004daa:	e00b      	b.n	8004dc4 <UART_SetConfig+0x180>
 8004dac:	2300      	movs	r3, #0
 8004dae:	76fb      	strb	r3, [r7, #27]
 8004db0:	e089      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004db2:	2302      	movs	r3, #2
 8004db4:	76fb      	strb	r3, [r7, #27]
 8004db6:	e086      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004db8:	2304      	movs	r3, #4
 8004dba:	76fb      	strb	r3, [r7, #27]
 8004dbc:	e083      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	76fb      	strb	r3, [r7, #27]
 8004dc2:	e080      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	76fb      	strb	r3, [r7, #27]
 8004dc8:	e07d      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a5b      	ldr	r2, [pc, #364]	; (8004f3c <UART_SetConfig+0x2f8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d120      	bne.n	8004e16 <UART_SetConfig+0x1d2>
 8004dd4:	4b56      	ldr	r3, [pc, #344]	; (8004f30 <UART_SetConfig+0x2ec>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dde:	2bc0      	cmp	r3, #192	; 0xc0
 8004de0:	d013      	beq.n	8004e0a <UART_SetConfig+0x1c6>
 8004de2:	2bc0      	cmp	r3, #192	; 0xc0
 8004de4:	d814      	bhi.n	8004e10 <UART_SetConfig+0x1cc>
 8004de6:	2b80      	cmp	r3, #128	; 0x80
 8004de8:	d009      	beq.n	8004dfe <UART_SetConfig+0x1ba>
 8004dea:	2b80      	cmp	r3, #128	; 0x80
 8004dec:	d810      	bhi.n	8004e10 <UART_SetConfig+0x1cc>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <UART_SetConfig+0x1b4>
 8004df2:	2b40      	cmp	r3, #64	; 0x40
 8004df4:	d006      	beq.n	8004e04 <UART_SetConfig+0x1c0>
 8004df6:	e00b      	b.n	8004e10 <UART_SetConfig+0x1cc>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	76fb      	strb	r3, [r7, #27]
 8004dfc:	e063      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	76fb      	strb	r3, [r7, #27]
 8004e02:	e060      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004e04:	2304      	movs	r3, #4
 8004e06:	76fb      	strb	r3, [r7, #27]
 8004e08:	e05d      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004e0a:	2308      	movs	r3, #8
 8004e0c:	76fb      	strb	r3, [r7, #27]
 8004e0e:	e05a      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004e10:	2310      	movs	r3, #16
 8004e12:	76fb      	strb	r3, [r7, #27]
 8004e14:	e057      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a49      	ldr	r2, [pc, #292]	; (8004f40 <UART_SetConfig+0x2fc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d125      	bne.n	8004e6c <UART_SetConfig+0x228>
 8004e20:	4b43      	ldr	r3, [pc, #268]	; (8004f30 <UART_SetConfig+0x2ec>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e2e:	d017      	beq.n	8004e60 <UART_SetConfig+0x21c>
 8004e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e34:	d817      	bhi.n	8004e66 <UART_SetConfig+0x222>
 8004e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3a:	d00b      	beq.n	8004e54 <UART_SetConfig+0x210>
 8004e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e40:	d811      	bhi.n	8004e66 <UART_SetConfig+0x222>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <UART_SetConfig+0x20a>
 8004e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4a:	d006      	beq.n	8004e5a <UART_SetConfig+0x216>
 8004e4c:	e00b      	b.n	8004e66 <UART_SetConfig+0x222>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	76fb      	strb	r3, [r7, #27]
 8004e52:	e038      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004e54:	2302      	movs	r3, #2
 8004e56:	76fb      	strb	r3, [r7, #27]
 8004e58:	e035      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004e5a:	2304      	movs	r3, #4
 8004e5c:	76fb      	strb	r3, [r7, #27]
 8004e5e:	e032      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004e60:	2308      	movs	r3, #8
 8004e62:	76fb      	strb	r3, [r7, #27]
 8004e64:	e02f      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004e66:	2310      	movs	r3, #16
 8004e68:	76fb      	strb	r3, [r7, #27]
 8004e6a:	e02c      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a2d      	ldr	r2, [pc, #180]	; (8004f28 <UART_SetConfig+0x2e4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d125      	bne.n	8004ec2 <UART_SetConfig+0x27e>
 8004e76:	4b2e      	ldr	r3, [pc, #184]	; (8004f30 <UART_SetConfig+0x2ec>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e84:	d017      	beq.n	8004eb6 <UART_SetConfig+0x272>
 8004e86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e8a:	d817      	bhi.n	8004ebc <UART_SetConfig+0x278>
 8004e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e90:	d00b      	beq.n	8004eaa <UART_SetConfig+0x266>
 8004e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e96:	d811      	bhi.n	8004ebc <UART_SetConfig+0x278>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <UART_SetConfig+0x260>
 8004e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea0:	d006      	beq.n	8004eb0 <UART_SetConfig+0x26c>
 8004ea2:	e00b      	b.n	8004ebc <UART_SetConfig+0x278>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	76fb      	strb	r3, [r7, #27]
 8004ea8:	e00d      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	76fb      	strb	r3, [r7, #27]
 8004eae:	e00a      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004eb0:	2304      	movs	r3, #4
 8004eb2:	76fb      	strb	r3, [r7, #27]
 8004eb4:	e007      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004eb6:	2308      	movs	r3, #8
 8004eb8:	76fb      	strb	r3, [r7, #27]
 8004eba:	e004      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	76fb      	strb	r3, [r7, #27]
 8004ec0:	e001      	b.n	8004ec6 <UART_SetConfig+0x282>
 8004ec2:	2310      	movs	r3, #16
 8004ec4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a17      	ldr	r2, [pc, #92]	; (8004f28 <UART_SetConfig+0x2e4>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	f040 8087 	bne.w	8004fe0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ed2:	7efb      	ldrb	r3, [r7, #27]
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d837      	bhi.n	8004f48 <UART_SetConfig+0x304>
 8004ed8:	a201      	add	r2, pc, #4	; (adr r2, 8004ee0 <UART_SetConfig+0x29c>)
 8004eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ede:	bf00      	nop
 8004ee0:	08004f05 	.word	0x08004f05
 8004ee4:	08004f49 	.word	0x08004f49
 8004ee8:	08004f0d 	.word	0x08004f0d
 8004eec:	08004f49 	.word	0x08004f49
 8004ef0:	08004f13 	.word	0x08004f13
 8004ef4:	08004f49 	.word	0x08004f49
 8004ef8:	08004f49 	.word	0x08004f49
 8004efc:	08004f49 	.word	0x08004f49
 8004f00:	08004f1b 	.word	0x08004f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f04:	f7ff f874 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8004f08:	6178      	str	r0, [r7, #20]
        break;
 8004f0a:	e022      	b.n	8004f52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <UART_SetConfig+0x300>)
 8004f0e:	617b      	str	r3, [r7, #20]
        break;
 8004f10:	e01f      	b.n	8004f52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f12:	f7fe ffd5 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 8004f16:	6178      	str	r0, [r7, #20]
        break;
 8004f18:	e01b      	b.n	8004f52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f1e:	617b      	str	r3, [r7, #20]
        break;
 8004f20:	e017      	b.n	8004f52 <UART_SetConfig+0x30e>
 8004f22:	bf00      	nop
 8004f24:	efff69f3 	.word	0xefff69f3
 8004f28:	40008000 	.word	0x40008000
 8004f2c:	40013800 	.word	0x40013800
 8004f30:	40021000 	.word	0x40021000
 8004f34:	40004400 	.word	0x40004400
 8004f38:	40004800 	.word	0x40004800
 8004f3c:	40004c00 	.word	0x40004c00
 8004f40:	40005000 	.word	0x40005000
 8004f44:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	76bb      	strb	r3, [r7, #26]
        break;
 8004f50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80f1 	beq.w	800513c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	4413      	add	r3, r2
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d305      	bcc.n	8004f76 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d902      	bls.n	8004f7c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	76bb      	strb	r3, [r7, #26]
 8004f7a:	e0df      	b.n	800513c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f04f 0100 	mov.w	r1, #0
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	020b      	lsls	r3, r1, #8
 8004f8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f92:	0202      	lsls	r2, r0, #8
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	6849      	ldr	r1, [r1, #4]
 8004f98:	0849      	lsrs	r1, r1, #1
 8004f9a:	4608      	mov	r0, r1
 8004f9c:	f04f 0100 	mov.w	r1, #0
 8004fa0:	1814      	adds	r4, r2, r0
 8004fa2:	eb43 0501 	adc.w	r5, r3, r1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	461a      	mov	r2, r3
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	f7fb f908 	bl	80001c8 <__aeabi_uldivmod>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fc6:	d308      	bcc.n	8004fda <UART_SetConfig+0x396>
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fce:	d204      	bcs.n	8004fda <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	60da      	str	r2, [r3, #12]
 8004fd8:	e0b0      	b.n	800513c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	76bb      	strb	r3, [r7, #26]
 8004fde:	e0ad      	b.n	800513c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe8:	d15b      	bne.n	80050a2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004fea:	7efb      	ldrb	r3, [r7, #27]
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d828      	bhi.n	8005042 <UART_SetConfig+0x3fe>
 8004ff0:	a201      	add	r2, pc, #4	; (adr r2, 8004ff8 <UART_SetConfig+0x3b4>)
 8004ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff6:	bf00      	nop
 8004ff8:	0800501d 	.word	0x0800501d
 8004ffc:	08005025 	.word	0x08005025
 8005000:	0800502d 	.word	0x0800502d
 8005004:	08005043 	.word	0x08005043
 8005008:	08005033 	.word	0x08005033
 800500c:	08005043 	.word	0x08005043
 8005010:	08005043 	.word	0x08005043
 8005014:	08005043 	.word	0x08005043
 8005018:	0800503b 	.word	0x0800503b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800501c:	f7fe ffe8 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8005020:	6178      	str	r0, [r7, #20]
        break;
 8005022:	e013      	b.n	800504c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005024:	f7fe fffa 	bl	800401c <HAL_RCC_GetPCLK2Freq>
 8005028:	6178      	str	r0, [r7, #20]
        break;
 800502a:	e00f      	b.n	800504c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800502c:	4b49      	ldr	r3, [pc, #292]	; (8005154 <UART_SetConfig+0x510>)
 800502e:	617b      	str	r3, [r7, #20]
        break;
 8005030:	e00c      	b.n	800504c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005032:	f7fe ff45 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 8005036:	6178      	str	r0, [r7, #20]
        break;
 8005038:	e008      	b.n	800504c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800503a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800503e:	617b      	str	r3, [r7, #20]
        break;
 8005040:	e004      	b.n	800504c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	76bb      	strb	r3, [r7, #26]
        break;
 800504a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d074      	beq.n	800513c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	005a      	lsls	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	085b      	lsrs	r3, r3, #1
 800505c:	441a      	add	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	fbb2 f3f3 	udiv	r3, r2, r3
 8005066:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b0f      	cmp	r3, #15
 800506c:	d916      	bls.n	800509c <UART_SetConfig+0x458>
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005074:	d212      	bcs.n	800509c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	b29b      	uxth	r3, r3
 800507a:	f023 030f 	bic.w	r3, r3, #15
 800507e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	085b      	lsrs	r3, r3, #1
 8005084:	b29b      	uxth	r3, r3
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	b29a      	uxth	r2, r3
 800508c:	89fb      	ldrh	r3, [r7, #14]
 800508e:	4313      	orrs	r3, r2
 8005090:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	89fa      	ldrh	r2, [r7, #14]
 8005098:	60da      	str	r2, [r3, #12]
 800509a:	e04f      	b.n	800513c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	76bb      	strb	r3, [r7, #26]
 80050a0:	e04c      	b.n	800513c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050a2:	7efb      	ldrb	r3, [r7, #27]
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d828      	bhi.n	80050fa <UART_SetConfig+0x4b6>
 80050a8:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <UART_SetConfig+0x46c>)
 80050aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ae:	bf00      	nop
 80050b0:	080050d5 	.word	0x080050d5
 80050b4:	080050dd 	.word	0x080050dd
 80050b8:	080050e5 	.word	0x080050e5
 80050bc:	080050fb 	.word	0x080050fb
 80050c0:	080050eb 	.word	0x080050eb
 80050c4:	080050fb 	.word	0x080050fb
 80050c8:	080050fb 	.word	0x080050fb
 80050cc:	080050fb 	.word	0x080050fb
 80050d0:	080050f3 	.word	0x080050f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d4:	f7fe ff8c 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 80050d8:	6178      	str	r0, [r7, #20]
        break;
 80050da:	e013      	b.n	8005104 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050dc:	f7fe ff9e 	bl	800401c <HAL_RCC_GetPCLK2Freq>
 80050e0:	6178      	str	r0, [r7, #20]
        break;
 80050e2:	e00f      	b.n	8005104 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e4:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <UART_SetConfig+0x510>)
 80050e6:	617b      	str	r3, [r7, #20]
        break;
 80050e8:	e00c      	b.n	8005104 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ea:	f7fe fee9 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 80050ee:	6178      	str	r0, [r7, #20]
        break;
 80050f0:	e008      	b.n	8005104 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050f6:	617b      	str	r3, [r7, #20]
        break;
 80050f8:	e004      	b.n	8005104 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	76bb      	strb	r3, [r7, #26]
        break;
 8005102:	bf00      	nop
    }

    if (pclk != 0U)
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d018      	beq.n	800513c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	085a      	lsrs	r2, r3, #1
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	441a      	add	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	fbb2 f3f3 	udiv	r3, r2, r3
 800511c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2b0f      	cmp	r3, #15
 8005122:	d909      	bls.n	8005138 <UART_SetConfig+0x4f4>
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800512a:	d205      	bcs.n	8005138 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	b29a      	uxth	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60da      	str	r2, [r3, #12]
 8005136:	e001      	b.n	800513c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005148:	7ebb      	ldrb	r3, [r7, #26]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3720      	adds	r7, #32
 800514e:	46bd      	mov	sp, r7
 8005150:	bdb0      	pop	{r4, r5, r7, pc}
 8005152:	bf00      	nop
 8005154:	00f42400 	.word	0x00f42400

08005158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01a      	beq.n	800526e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005256:	d10a      	bne.n	800526e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	605a      	str	r2, [r3, #4]
  }
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052ac:	f7fc fa0e 	bl	80016cc <HAL_GetTick>
 80052b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d10e      	bne.n	80052de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f82d 	bl	800532e <UART_WaitOnFlagUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e023      	b.n	8005326 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d10e      	bne.n	800530a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f817 	bl	800532e <UART_WaitOnFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e00d      	b.n	8005326 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2220      	movs	r2, #32
 8005314:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b09c      	sub	sp, #112	; 0x70
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	603b      	str	r3, [r7, #0]
 800533a:	4613      	mov	r3, r2
 800533c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800533e:	e0a5      	b.n	800548c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005346:	f000 80a1 	beq.w	800548c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534a:	f7fc f9bf 	bl	80016cc <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005356:	429a      	cmp	r2, r3
 8005358:	d302      	bcc.n	8005360 <UART_WaitOnFlagUntilTimeout+0x32>
 800535a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800535c:	2b00      	cmp	r3, #0
 800535e:	d13e      	bne.n	80053de <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800536e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005370:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005374:	667b      	str	r3, [r7, #100]	; 0x64
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800537e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005380:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005384:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800538c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e6      	bne.n	8005360 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3308      	adds	r3, #8
 8005398:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a4:	f023 0301 	bic.w	r3, r3, #1
 80053a8:	663b      	str	r3, [r7, #96]	; 0x60
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3308      	adds	r3, #8
 80053b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80053b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e5      	bne.n	8005392 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e067      	b.n	80054ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d04f      	beq.n	800548c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053fa:	d147      	bne.n	800548c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005404:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800541a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005424:	637b      	str	r3, [r7, #52]	; 0x34
 8005426:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800542a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e6      	bne.n	8005406 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3308      	adds	r3, #8
 800543e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	e853 3f00 	ldrex	r3, [r3]
 8005446:	613b      	str	r3, [r7, #16]
   return(result);
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f023 0301 	bic.w	r3, r3, #1
 800544e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3308      	adds	r3, #8
 8005456:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005458:	623a      	str	r2, [r7, #32]
 800545a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	69f9      	ldr	r1, [r7, #28]
 800545e:	6a3a      	ldr	r2, [r7, #32]
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	61bb      	str	r3, [r7, #24]
   return(result);
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e5      	bne.n	8005438 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2220      	movs	r2, #32
 8005476:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e010      	b.n	80054ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	69da      	ldr	r2, [r3, #28]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4013      	ands	r3, r2
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	429a      	cmp	r2, r3
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	461a      	mov	r2, r3
 80054a4:	79fb      	ldrb	r3, [r7, #7]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	f43f af4a 	beq.w	8005340 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3770      	adds	r7, #112	; 0x70
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <__libc_init_array>:
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	4d0d      	ldr	r5, [pc, #52]	; (80054f0 <__libc_init_array+0x38>)
 80054bc:	4c0d      	ldr	r4, [pc, #52]	; (80054f4 <__libc_init_array+0x3c>)
 80054be:	1b64      	subs	r4, r4, r5
 80054c0:	10a4      	asrs	r4, r4, #2
 80054c2:	2600      	movs	r6, #0
 80054c4:	42a6      	cmp	r6, r4
 80054c6:	d109      	bne.n	80054dc <__libc_init_array+0x24>
 80054c8:	4d0b      	ldr	r5, [pc, #44]	; (80054f8 <__libc_init_array+0x40>)
 80054ca:	4c0c      	ldr	r4, [pc, #48]	; (80054fc <__libc_init_array+0x44>)
 80054cc:	f000 f820 	bl	8005510 <_init>
 80054d0:	1b64      	subs	r4, r4, r5
 80054d2:	10a4      	asrs	r4, r4, #2
 80054d4:	2600      	movs	r6, #0
 80054d6:	42a6      	cmp	r6, r4
 80054d8:	d105      	bne.n	80054e6 <__libc_init_array+0x2e>
 80054da:	bd70      	pop	{r4, r5, r6, pc}
 80054dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e0:	4798      	blx	r3
 80054e2:	3601      	adds	r6, #1
 80054e4:	e7ee      	b.n	80054c4 <__libc_init_array+0xc>
 80054e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ea:	4798      	blx	r3
 80054ec:	3601      	adds	r6, #1
 80054ee:	e7f2      	b.n	80054d6 <__libc_init_array+0x1e>
 80054f0:	08005578 	.word	0x08005578
 80054f4:	08005578 	.word	0x08005578
 80054f8:	08005578 	.word	0x08005578
 80054fc:	0800557c 	.word	0x0800557c

08005500 <memset>:
 8005500:	4402      	add	r2, r0
 8005502:	4603      	mov	r3, r0
 8005504:	4293      	cmp	r3, r2
 8005506:	d100      	bne.n	800550a <memset+0xa>
 8005508:	4770      	bx	lr
 800550a:	f803 1b01 	strb.w	r1, [r3], #1
 800550e:	e7f9      	b.n	8005504 <memset+0x4>

08005510 <_init>:
 8005510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005512:	bf00      	nop
 8005514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005516:	bc08      	pop	{r3}
 8005518:	469e      	mov	lr, r3
 800551a:	4770      	bx	lr

0800551c <_fini>:
 800551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551e:	bf00      	nop
 8005520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005522:	bc08      	pop	{r3}
 8005524:	469e      	mov	lr, r3
 8005526:	4770      	bx	lr
